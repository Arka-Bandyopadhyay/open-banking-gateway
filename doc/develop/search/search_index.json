{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Banking Gateway Provides tools, adapters and connectors for transparent access to open banking apis. The initial effort focuses on the connectivity to banks that implement the European PSD2 directive either through one of the common market initiatives like : The Berlin Group NextGenPSD2 The Open Banking UK The Polish PSD2 API Or even through proprietary bank api like the ING\u2019s PSD2 API What this Project is about Key Challenge for a TPPs PSD2 as the first regulatory driven Open Banking initiative offers many opportunities for both Banks and Third Party Providers. TPPs can use the account information and payment services provided by the banks in order to offer new innovative services to the end users. The more banks a TPP can interact with each other, the more end consumer can be provided with reacher banking solutions, which in turn simplifies and leverage commercial value chains. Being able to interact with different bank APIs can be a time and cost consuming challenge. Even though PSD2 sets a standard for bank interfaces, there is a lot of space for implementation options. A bank, therefore, can have it's own PSD2 compliant solution or implement one of the known market standards, like Open Banking UK, Berlin Group or STET. This open banking gateway will provide with a common interface with the aim of simplifying access to those APIs by third parties. Third Parties Contribution This project is designed to enable contribution from different sources, as the open banking challenge will start with a magnitude of discrepancies in individual bank implementations, even for banks implementing a common standards. Big Picture The following picture displays the overall architecture of this banking gateway: Documentation Please take a look into our documentation to know more about: Planned and released versions Versioning, Release and Support policy Release notes Roadmap for next features development Architecture Dictionary Use Cases Banking Protokol Design PSU Access Security Design JavaDoc How to contribute Getting started Contribution Guidelines Authors & Contact Francis Pouatcha - Initial work - adorsys See also the list of contributors who participated in this project. For commercial support please contact adorsys Team . License This project is licensed under the Apache License version 2.0 - see the LICENSE file for details","title":"Home"},{"location":"#open-banking-gateway","text":"Provides tools, adapters and connectors for transparent access to open banking apis. The initial effort focuses on the connectivity to banks that implement the European PSD2 directive either through one of the common market initiatives like : The Berlin Group NextGenPSD2 The Open Banking UK The Polish PSD2 API Or even through proprietary bank api like the ING\u2019s PSD2 API","title":"Open Banking Gateway"},{"location":"#what-this-project-is-about","text":"","title":"What this Project is about"},{"location":"#key-challenge-for-a-tpps","text":"PSD2 as the first regulatory driven Open Banking initiative offers many opportunities for both Banks and Third Party Providers. TPPs can use the account information and payment services provided by the banks in order to offer new innovative services to the end users. The more banks a TPP can interact with each other, the more end consumer can be provided with reacher banking solutions, which in turn simplifies and leverage commercial value chains. Being able to interact with different bank APIs can be a time and cost consuming challenge. Even though PSD2 sets a standard for bank interfaces, there is a lot of space for implementation options. A bank, therefore, can have it's own PSD2 compliant solution or implement one of the known market standards, like Open Banking UK, Berlin Group or STET. This open banking gateway will provide with a common interface with the aim of simplifying access to those APIs by third parties.","title":"Key Challenge for a TPPs"},{"location":"#third-parties-contribution","text":"This project is designed to enable contribution from different sources, as the open banking challenge will start with a magnitude of discrepancies in individual bank implementations, even for banks implementing a common standards.","title":"Third Parties Contribution"},{"location":"#big-picture","text":"The following picture displays the overall architecture of this banking gateway:","title":"Big Picture"},{"location":"#documentation","text":"Please take a look into our documentation to know more about:","title":"Documentation"},{"location":"#planned-and-released-versions","text":"Versioning, Release and Support policy Release notes Roadmap for next features development","title":"Planned and released versions"},{"location":"#architecture","text":"Dictionary Use Cases Banking Protokol Design PSU Access Security Design JavaDoc","title":"Architecture"},{"location":"#how-to-contribute","text":"Getting started Contribution Guidelines","title":"How to contribute"},{"location":"#authors-contact","text":"Francis Pouatcha - Initial work - adorsys See also the list of contributors who participated in this project. For commercial support please contact adorsys Team .","title":"Authors &amp; Contact"},{"location":"#license","text":"This project is licensed under the Apache License version 2.0 - see the LICENSE file for details","title":"License"},{"location":"ContributionGuidelines/","text":"Development and contributing Internal development process Development is performed by 2-weeks sprints (We use kind of Scrum framework). We use Git flow for development. Leading branch is always develop . Each new feature/bugfix is done in its own branch. All features/bugs are documented in zenhub . After finishing branch and seeing that branch has successfully been build by travis a pull request to branch develop must be created in github . Each developer of the team with approval rights can have a look at pull request and do the review. If no review is done for more than 24 hours, the developer is allowed to merge the branch to develop branch. Of course build in travis must work after merge. The master branch is never touched. Never, except when release build is done. This is triggered by the project management. When release build is triggered the current develop is merged into master. For that master never ever must be updated manually. Definition of Ready The task is ready to be put into a sprint when all following conditions are met: * All dependencies are clear and the work to work with them are clarified * Use-case is defined in the task * Acceptance criteria are defined Definition of Done The Task could be accepted only when following requirements are met: * Code is reviewed (and approved) by another developer * API documentation in Swagger UI corresponds to acceptance criteria * At least one automated test for every Use-case exists nice to have Project documentation (Markdown files) contains the information how to run the demo of use case Javadocs for public methods are written (including parameter description). For REST interfaces Swagger-annotations are sufficient. Contributing Any person are free to join us by implementing some parts of code or fixing some bugs. For that separate branch has to be created. Technical conditions for the implementations Code styling If you are using Intellij IDEs, like we do, please consider importing our code-style settings. Further explanation in checkstyle Java Please use Optionals and corresponding streams instead of null-checks where possible We prefer using Mockito over EasyMock for unit-tests. We prefer SpringBoot autoconfiguration over manual Configuration where possible Adding new modules When adding new modules or changing other modules ensure you are adding them to last-module-codecoverage too. Open API 3.0 We use API First approach, so that API files are the first source of a contract. The code generated from opba-consent-rest-api/src/main/resources/static/consent_api.yml opba-banking-rest-api/src/main/resources/static/banking_api_ais.yml is generated to opba-consent-rest-api/target/generated-sources/open-api/src/main/java opba-banking-rest-api/target/generated-sources/open-api/src/main/java So the folders have to be made known to the IDE. Checkstyle The code uses backend.checkstyle.xml placed in the root of the project. To activate it with intellij install the CheckStyle-IDEA v5.34.0 Plugin and configure in Other Settings -> Checkstyle the version 8.19 and add the configuration file backend.checkstyle.xml . How to Release Release is being done using the release scripts ( (C) by Boris Skert ) located under scripts/release-scripts. For detailed info see README for release-scripts . Steps to make a release Release is made from local copy! Ensure that you have enough rights to push to master and develop branches $ git submodule update --init --remote $ scripts/release-scripts/release.sh <release-version> <next-develop-version> Example $ scripts/release-scripts/release.sh 1.0 1.1","title":"Contibution Guidelines"},{"location":"ContributionGuidelines/#development-and-contributing","text":"","title":"Development and contributing"},{"location":"ContributionGuidelines/#internal-development-process","text":"Development is performed by 2-weeks sprints (We use kind of Scrum framework). We use Git flow for development. Leading branch is always develop . Each new feature/bugfix is done in its own branch. All features/bugs are documented in zenhub . After finishing branch and seeing that branch has successfully been build by travis a pull request to branch develop must be created in github . Each developer of the team with approval rights can have a look at pull request and do the review. If no review is done for more than 24 hours, the developer is allowed to merge the branch to develop branch. Of course build in travis must work after merge. The master branch is never touched. Never, except when release build is done. This is triggered by the project management. When release build is triggered the current develop is merged into master. For that master never ever must be updated manually.","title":"Internal development process"},{"location":"ContributionGuidelines/#definition-of-ready","text":"The task is ready to be put into a sprint when all following conditions are met: * All dependencies are clear and the work to work with them are clarified * Use-case is defined in the task * Acceptance criteria are defined","title":"Definition of Ready"},{"location":"ContributionGuidelines/#definition-of-done","text":"The Task could be accepted only when following requirements are met: * Code is reviewed (and approved) by another developer * API documentation in Swagger UI corresponds to acceptance criteria * At least one automated test for every Use-case exists nice to have Project documentation (Markdown files) contains the information how to run the demo of use case Javadocs for public methods are written (including parameter description). For REST interfaces Swagger-annotations are sufficient.","title":"Definition of Done"},{"location":"ContributionGuidelines/#contributing","text":"Any person are free to join us by implementing some parts of code or fixing some bugs. For that separate branch has to be created.","title":"Contributing"},{"location":"ContributionGuidelines/#technical-conditions-for-the-implementations","text":"","title":"Technical conditions for the implementations"},{"location":"ContributionGuidelines/#code-styling","text":"If you are using Intellij IDEs, like we do, please consider importing our code-style settings. Further explanation in checkstyle","title":"Code styling"},{"location":"ContributionGuidelines/#java","text":"Please use Optionals and corresponding streams instead of null-checks where possible We prefer using Mockito over EasyMock for unit-tests. We prefer SpringBoot autoconfiguration over manual Configuration where possible","title":"Java"},{"location":"ContributionGuidelines/#adding-new-modules","text":"When adding new modules or changing other modules ensure you are adding them to last-module-codecoverage too.","title":"Adding new modules"},{"location":"ContributionGuidelines/#open-api-30","text":"We use API First approach, so that API files are the first source of a contract. The code generated from opba-consent-rest-api/src/main/resources/static/consent_api.yml opba-banking-rest-api/src/main/resources/static/banking_api_ais.yml is generated to opba-consent-rest-api/target/generated-sources/open-api/src/main/java opba-banking-rest-api/target/generated-sources/open-api/src/main/java So the folders have to be made known to the IDE.","title":"Open API 3.0"},{"location":"ContributionGuidelines/#checkstyle","text":"The code uses backend.checkstyle.xml placed in the root of the project. To activate it with intellij install the CheckStyle-IDEA v5.34.0 Plugin and configure in Other Settings -> Checkstyle the version 8.19 and add the configuration file backend.checkstyle.xml .","title":"Checkstyle"},{"location":"ContributionGuidelines/#how-to-release","text":"Release is being done using the release scripts ( (C) by Boris Skert ) located under scripts/release-scripts. For detailed info see README for release-scripts .","title":"How to Release"},{"location":"ContributionGuidelines/#steps-to-make-a-release","text":"Release is made from local copy! Ensure that you have enough rights to push to master and develop branches $ git submodule update --init --remote $ scripts/release-scripts/release.sh <release-version> <next-develop-version> Example $ scripts/release-scripts/release.sh 1.0 1.1","title":"Steps to make a release"},{"location":"getting_started/","text":"How to start the project Compile everything with make all . Alternatively compile Java code with mvn clean package and frontend with npm build at fintech-examples/fintech-ui Start frontends with npm serve from fintech-examples/fintech-ui Start backends with mvn spring-boot:run from opba-embedded-starter","title":"Getting started"},{"location":"getting_started/#how-to-start-the-project","text":"Compile everything with make all . Alternatively compile Java code with mvn clean package and frontend with npm build at fintech-examples/fintech-ui Start frontends with npm serve from fintech-examples/fintech-ui Start backends with mvn spring-boot:run from opba-embedded-starter","title":"How to start the project"},{"location":"initial_requirements/","text":"Initial Requirements Still in a draft state. We are working on the process of aligning documentation and code. Till that is done, we will be documenting using the gh-pages branch. What can you find here:","title":"Initial requirements"},{"location":"initial_requirements/#initial-requirements","text":"Still in a draft state. We are working on the process of aligning documentation and code. Till that is done, we will be documenting using the gh-pages branch. What can you find here:","title":"Initial Requirements"},{"location":"releasenotes/","text":"Release Notes release 0.0.5 Login Page creation for the Demo Frontend Change Test data with productive data for the TppBankSearchApi Update the general project's documentation Getting Started documentation Definition of the FinTechApi, BankingApi and ConsentAuthorisationApi Integration of Bank search API and FintechUI release 0.0.4 release 0.0.3 Write Sequence diagram uses cases based Validation of flowable BPMN engine (great job!) Backend Proof of Concept Implementation of TppBankSearchApi Create CI/CD code quality checks Write Contributions guidelines|","title":"Release notes"},{"location":"releasenotes/#release-notes","text":"","title":"Release Notes"},{"location":"releasenotes/#release-005","text":"Login Page creation for the Demo Frontend Change Test data with productive data for the TppBankSearchApi Update the general project's documentation Getting Started documentation Definition of the FinTechApi, BankingApi and ConsentAuthorisationApi Integration of Bank search API and FintechUI","title":"release 0.0.5"},{"location":"releasenotes/#release-004","text":"","title":"release 0.0.4"},{"location":"releasenotes/#release-003","text":"Write Sequence diagram uses cases based Validation of flowable BPMN engine (great job!) Backend Proof of Concept Implementation of TppBankSearchApi Create CI/CD code quality checks Write Contributions guidelines|","title":"release 0.0.3"},{"location":"roadmap/","text":"Roadmap Our project starts on November 1st 2019 and the Banking Gateway team offers development with two branch: Develop branch :This is the branch from which a release is built and there, everything from all the other branches always collects. Master branch : This branch is always with a new release number and Here, certain development branches are considered so good that they are included in master. This project is planned until the end of 2020 and our current timetable (MVP1) is until April 2020, by which time the following targets should be achieved: * Demo Frontend used to test the Banking Gateway * Integration of german banks with Redirect and Embedded Approaches * TppBankSearchApi providing only German banks * TppBankingApi providing the following banking endpoints: * Get transaction information * Get list of reachable accounts * Get account details of a list of accessible accounts * Get balances for a given account and * Initiation of single payment release date version 20.12.2019 0.0.3 Write Sequence diagram uses cases based Validation of flowable BPMN engine Backend Proof of Concept Implementation of TppBankSearchApi Create CI/CD code quality checks Write Contributions guidelines 16.01.2020 0.0.4 Login Page creation for the Demo Frontend Change Test data with productive data for the TppBankSearchApi Update the general project's documentation Getting Started documentation Definition of the FinTechApi, BankingApi and ConsentAuthorisationApi Integration of Bank search API and FintechUI 29.01.2020 0.0.5 Move the implemented TppBankSearchApi to a separate module Make a Backend for the login to the FinTechUi Implementation of the Login Page Dummy Implementation of the BankingApi list of account Dummy Implementation of the list of account of the FinTechApi Create relation between BankId and Service offered Create Banking Protocol Facade Implementation of the Banking Protocol for the dynamic Sandbox Create the database migration module","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Our project starts on November 1st 2019 and the Banking Gateway team offers development with two branch: Develop branch :This is the branch from which a release is built and there, everything from all the other branches always collects. Master branch : This branch is always with a new release number and Here, certain development branches are considered so good that they are included in master. This project is planned until the end of 2020 and our current timetable (MVP1) is until April 2020, by which time the following targets should be achieved: * Demo Frontend used to test the Banking Gateway * Integration of german banks with Redirect and Embedded Approaches * TppBankSearchApi providing only German banks * TppBankingApi providing the following banking endpoints: * Get transaction information * Get list of reachable accounts * Get account details of a list of accessible accounts * Get balances for a given account and * Initiation of single payment release date version 20.12.2019 0.0.3 Write Sequence diagram uses cases based Validation of flowable BPMN engine Backend Proof of Concept Implementation of TppBankSearchApi Create CI/CD code quality checks Write Contributions guidelines 16.01.2020 0.0.4 Login Page creation for the Demo Frontend Change Test data with productive data for the TppBankSearchApi Update the general project's documentation Getting Started documentation Definition of the FinTechApi, BankingApi and ConsentAuthorisationApi Integration of Bank search API and FintechUI 29.01.2020 0.0.5 Move the implemented TppBankSearchApi to a separate module Make a Backend for the login to the FinTechUi Implementation of the Login Page Dummy Implementation of the BankingApi list of account Dummy Implementation of the list of account of the FinTechApi Create relation between BankId and Service offered Create Banking Protocol Facade Implementation of the Banking Protocol for the dynamic Sandbox Create the database migration module","title":"Roadmap"},{"location":"version_policy/","text":"Version Policy","title":"Version policy"},{"location":"version_policy/#version-policy","text":"","title":"Version Policy"},{"location":"architecture/1-loginWithFinTech/","text":"User Login Diagram Description Login-001, -002, -003 FinTechUI.loadFinTechApplication & enterLoginData FinTechUI displays the LoginUI to the PSU. PSU enters username and password and initiates the login request. Login-004, -005 FinTechApi.login The PSU initiate a session with the FinTech providing his username and password as known to the FinTechApi. Username and password are provided in a LoginRequest object. Upon successful login, the FinTechApi will return a response 200_UserProfile containing: * UserProfile: provided in the body. * sessionState: provided in the body. Used read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Set-Cookie header. Login-006 FinTechUI.displayBankSearchScreen Upon successfull login, the FinTechUi displays the bank search screen to the PSU.","title":"Login with FinTech Application"},{"location":"architecture/1-loginWithFinTech/#user-login","text":"","title":"User Login"},{"location":"architecture/1-loginWithFinTech/#diagram","text":"","title":"Diagram"},{"location":"architecture/1-loginWithFinTech/#description","text":"","title":"Description"},{"location":"architecture/1-loginWithFinTech/#login-001-002-003-fintechuiloadfintechapplication-enterlogindata","text":"FinTechUI displays the LoginUI to the PSU. PSU enters username and password and initiates the login request.","title":"Login-001, -002, -003 FinTechUI.loadFinTechApplication &amp; enterLoginData"},{"location":"architecture/1-loginWithFinTech/#login-004-005-fintechapilogin","text":"The PSU initiate a session with the FinTech providing his username and password as known to the FinTechApi. Username and password are provided in a LoginRequest object. Upon successful login, the FinTechApi will return a response 200_UserProfile containing: * UserProfile: provided in the body. * sessionState: provided in the body. Used read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Set-Cookie header.","title":"Login-004, -005 FinTechApi.login"},{"location":"architecture/1-loginWithFinTech/#login-006-fintechuidisplaybanksearchscreen","text":"Upon successfull login, the FinTechUi displays the bank search screen to the PSU.","title":"Login-006 FinTechUI.displayBankSearchScreen"},{"location":"architecture/2-searchBank/","text":"PSU Searches Bank By Keyword Definition Describes the bank search functionality in a FinTech Application. Generally bank search is provided to prevent PSU from manually entering complicated bank identifiers. This bank search API allows for incremental keyword based search. Implementation Approaches We will distinguish between remote and local incremental search. Remote Incremental Search The remote incremental search is implemented on the server side. A rest endpoint receives a keyword and return a list of matching search entries. Use Case Steps Use cases for this API: 1. PSU loads FinTechSearchScreen 2. FinTechUI displays a search screen to the PSU 3. PSU enters any keyword in the search input field 4. FinTechUI forward request to FinTechAPI 5. FinTechAPI forward request to TppBankSearchApi 6. TppBankSearchApi returns a list of matching BankDescriptors to FinTechAPI 7. FinTechAPI returns a list of matching BankDescriptors to FinTechBankSearchUI 8. UI displays list of found bank descriptors to PSU Step 4. through 8. is repeated as long as PSU modifies keywords (by adding or removing characters) RemoteSearch-001, -002 FinTechUI.loadFinTechSeachScreen, displaySearchScreen RemoteSearch-003 FinTechUI.enterSearchString RemoteSearch-004 FinTechApi.bankSearch The FinTechUI sends a get request to the FinTechApi. Request contains * keyword (searchInput): The bank search input string * start (searchStartIndex): The index of the first result * max (searchMaxResult): the max number of entries to return with the response. * sessionState: provided as a path param. Used to read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Cookie header. Used to identify the PSU. RemoteSearch-005, -006 TppBankSearchApi.bankSearch The FinTechApi sends a get request to the TppBankSearchApi. Request contains * keyword (searchInput): The bank search input string * start (searchStartIndex): The index of the first result * max (searchMaxResult): the max number of entries to return with the response. TppBankSearchApi returns a search result with following information. * List : found entries. * searchInput: The bank search input string (might have been normalized in the backend). * searchStartIndex: The index of the first result * searchMaxResult: The max number of entries to return with the response. * searchTotalResult: The total count of entities found for the given search input. RemoteSearch-007 FinTechApi return 200_BankSearchResult Result returned to FinTechUI contains same information as in RemoteSearch-005 and addition session management information like: * sessionState: provided in the response body. Used read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Set-Cookie header. RemoteSearch-007 FinTechUI.displaySearchResult Finally, the FinTechUI display's the bank search result to the PSU. Local Incremental Search Local incremental search generally provides a way of reducing round trip to servers. So there is no local incremental search endpoint, but an endpoint to download the list of all BankProfiles. The client is then responsible for the indexing and the implementation of the search logic. For the purpose of keeping the client code simple, interface will also provide the possibility of downloading a standard lucene index file, as many platform provide login provide processing of lucene indexes. This approach will prevent each client from perfoming the expensive lucene indexing. The following diagram describes additional steps performed in the local incremental search. Use Case Steps Use cases for this API: 1. PSU loads FinTechSearchScreen 2. FinTechUI requests the BankSearchIndex from FinTechApi 3. FinTechApi requests the BankSearchIndex from TppBankSearchApi 4. TppBankSearchApi return BankSearchIndex to FinTechApi 5. FinTechApi return BankSearchIndex to FinTechUI 6. FinTechUI displays a search screen to the PSU 7. PSU enters any keyword in the search input field 8. FinTechUI call the search routine of the embedded LocalSearch 9. LocalSearch uses the keyword to retrieve the list of matching entries 10. LocalSearch returns a list of matching BankDescriptors to FinTechBankSearchUI 11. UI displays list of found bank descriptors to PSU Step 8. through 11. is repeated as long as PSU modifies keywords (by adding or removing characters) Like this diagram shows, local bank search does not send request to the network. LocalSearch-001 FinTechUI.loadFinTechSeachScreen PSU loads the FinTechSearchString of the FinTechUI. LocalSearch-101, -103 FinTechApi.bankSearch The FinTechUI sends a get request to the FinTechApi. If the List is not yet loaded by the FinTechUI, the FinTechUI issues a bankSearch request to the FinTechApi. A keyword passed as query parameter allows the backend to reduce the initial extent of records included in the index. keyword (searchInput): The bank search input string. Must be used to reduce the extent of records to be included in the local search. E.g.: c=DE could limit the search to bank in Germany. start (searchStartIndex): The index of the first result. The start will be set to 0 to get all records. max (searchMaxResult): the max number of entries to return with the response. Set this number to -1 to receive all applicable records from the server. sessionState: provided as a path parameter. Used to read the FinTechLoginSessionCookie. FinTechLoginSessionCookie: provided in the Cookie header. Used to identify the PSU. TppBankSearchApi returns a search result with following information. * List : found entries. * searchInput: The bank search input string (might have been normalized in the backend). * searchStartIndex: The index of the first result * searchMaxResult: The max number of entries to return with the response. * searchTotalResult: The total count of entities found for the given search input. LocalSearch-102, -103 TppBankSearchApi.bankSearch The FinTechApi sends a get request to the TppBankSearchApi. Request contains * keyword (searchInput): The bank search input string * start (searchStartIndex): The index of the first result * max (searchMaxResult): the max number of entries to return with the response. TppBankSearchApi returns a search result with following information. * List : found entries. * searchInput: The bank search input string (might have been normalized in the backend). * searchStartIndex: The index of the first result * searchMaxResult: The max number of entries to return with the response. * searchTotalResult: The total count of entities found for the given search input. LocalSearch-104 FinTechApi return 200_BankSearchResult Result returned to FinTechUI contains same information as in LocalSearch-103 and addition session management information like: * sessionState: provided in the response body. Used read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Set-Cookie header. LocalSearch-105 displaySearchScreen LocalSearch-106 .. 110 enterKeyword, LocalSearch.search As the PSU enters search keywords, the FinTechUI issues a search request to the LocalSearch that performs the search operation locally and returns corresponding result that is displayed to the PSU on the go. New Idioms Discriminator The searchInput object passed to FinTechApi in this case is called discriminator and is used to reduce the extent of records to be included in the local search. E.g.: c=DE could limit the search to bank in Germany. If for example the TPP does not support some banks, he can include that information in the searchInput-String. LocalSearch This is the UI-Komponent that operates (like lucene) on a local search index in the UI-Application. The technology used to implement this search is specific to the UI technology. JavaScript based technologies might use tools like: elasticlunr Caching List The List return for the purpose of a local search can be cached by the FinTechApi to reduce quantity of request issued to the TppBankSearchApi","title":"Search bank"},{"location":"architecture/2-searchBank/#psu-searches-bank-by-keyword","text":"","title":"PSU Searches Bank By Keyword"},{"location":"architecture/2-searchBank/#definition","text":"Describes the bank search functionality in a FinTech Application. Generally bank search is provided to prevent PSU from manually entering complicated bank identifiers. This bank search API allows for incremental keyword based search.","title":"Definition"},{"location":"architecture/2-searchBank/#implementation-approaches","text":"We will distinguish between remote and local incremental search.","title":"Implementation Approaches"},{"location":"architecture/2-searchBank/#remote-incremental-search","text":"The remote incremental search is implemented on the server side. A rest endpoint receives a keyword and return a list of matching search entries.","title":"Remote Incremental Search"},{"location":"architecture/2-searchBank/#use-case-steps","text":"Use cases for this API: 1. PSU loads FinTechSearchScreen 2. FinTechUI displays a search screen to the PSU 3. PSU enters any keyword in the search input field 4. FinTechUI forward request to FinTechAPI 5. FinTechAPI forward request to TppBankSearchApi 6. TppBankSearchApi returns a list of matching BankDescriptors to FinTechAPI 7. FinTechAPI returns a list of matching BankDescriptors to FinTechBankSearchUI 8. UI displays list of found bank descriptors to PSU Step 4. through 8. is repeated as long as PSU modifies keywords (by adding or removing characters)","title":"Use Case Steps"},{"location":"architecture/2-searchBank/#remotesearch-001-002-fintechuiloadfintechseachscreen-displaysearchscreen","text":"","title":"RemoteSearch-001, -002 FinTechUI.loadFinTechSeachScreen, displaySearchScreen"},{"location":"architecture/2-searchBank/#remotesearch-003-fintechuientersearchstring","text":"","title":"RemoteSearch-003 FinTechUI.enterSearchString"},{"location":"architecture/2-searchBank/#remotesearch-004-fintechapibanksearch","text":"The FinTechUI sends a get request to the FinTechApi. Request contains * keyword (searchInput): The bank search input string * start (searchStartIndex): The index of the first result * max (searchMaxResult): the max number of entries to return with the response. * sessionState: provided as a path param. Used to read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Cookie header. Used to identify the PSU.","title":"RemoteSearch-004 FinTechApi.bankSearch"},{"location":"architecture/2-searchBank/#remotesearch-005-006-tppbanksearchapibanksearch","text":"The FinTechApi sends a get request to the TppBankSearchApi. Request contains * keyword (searchInput): The bank search input string * start (searchStartIndex): The index of the first result * max (searchMaxResult): the max number of entries to return with the response. TppBankSearchApi returns a search result with following information. * List : found entries. * searchInput: The bank search input string (might have been normalized in the backend). * searchStartIndex: The index of the first result * searchMaxResult: The max number of entries to return with the response. * searchTotalResult: The total count of entities found for the given search input.","title":"RemoteSearch-005, -006 TppBankSearchApi.bankSearch"},{"location":"architecture/2-searchBank/#remotesearch-007-fintechapi-return-200_banksearchresult","text":"Result returned to FinTechUI contains same information as in RemoteSearch-005 and addition session management information like: * sessionState: provided in the response body. Used read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Set-Cookie header.","title":"RemoteSearch-007 FinTechApi return 200_BankSearchResult"},{"location":"architecture/2-searchBank/#remotesearch-007-fintechuidisplaysearchresult","text":"Finally, the FinTechUI display's the bank search result to the PSU.","title":"RemoteSearch-007 FinTechUI.displaySearchResult"},{"location":"architecture/2-searchBank/#local-incremental-search","text":"Local incremental search generally provides a way of reducing round trip to servers. So there is no local incremental search endpoint, but an endpoint to download the list of all BankProfiles. The client is then responsible for the indexing and the implementation of the search logic. For the purpose of keeping the client code simple, interface will also provide the possibility of downloading a standard lucene index file, as many platform provide login provide processing of lucene indexes. This approach will prevent each client from perfoming the expensive lucene indexing. The following diagram describes additional steps performed in the local incremental search.","title":"Local Incremental Search"},{"location":"architecture/2-searchBank/#use-case-steps_1","text":"Use cases for this API: 1. PSU loads FinTechSearchScreen 2. FinTechUI requests the BankSearchIndex from FinTechApi 3. FinTechApi requests the BankSearchIndex from TppBankSearchApi 4. TppBankSearchApi return BankSearchIndex to FinTechApi 5. FinTechApi return BankSearchIndex to FinTechUI 6. FinTechUI displays a search screen to the PSU 7. PSU enters any keyword in the search input field 8. FinTechUI call the search routine of the embedded LocalSearch 9. LocalSearch uses the keyword to retrieve the list of matching entries 10. LocalSearch returns a list of matching BankDescriptors to FinTechBankSearchUI 11. UI displays list of found bank descriptors to PSU Step 8. through 11. is repeated as long as PSU modifies keywords (by adding or removing characters) Like this diagram shows, local bank search does not send request to the network.","title":"Use Case Steps"},{"location":"architecture/2-searchBank/#localsearch-001-fintechuiloadfintechseachscreen","text":"PSU loads the FinTechSearchString of the FinTechUI.","title":"LocalSearch-001 FinTechUI.loadFinTechSeachScreen"},{"location":"architecture/2-searchBank/#localsearch-101-103-fintechapibanksearch","text":"The FinTechUI sends a get request to the FinTechApi. If the List is not yet loaded by the FinTechUI, the FinTechUI issues a bankSearch request to the FinTechApi. A keyword passed as query parameter allows the backend to reduce the initial extent of records included in the index. keyword (searchInput): The bank search input string. Must be used to reduce the extent of records to be included in the local search. E.g.: c=DE could limit the search to bank in Germany. start (searchStartIndex): The index of the first result. The start will be set to 0 to get all records. max (searchMaxResult): the max number of entries to return with the response. Set this number to -1 to receive all applicable records from the server. sessionState: provided as a path parameter. Used to read the FinTechLoginSessionCookie. FinTechLoginSessionCookie: provided in the Cookie header. Used to identify the PSU. TppBankSearchApi returns a search result with following information. * List : found entries. * searchInput: The bank search input string (might have been normalized in the backend). * searchStartIndex: The index of the first result * searchMaxResult: The max number of entries to return with the response. * searchTotalResult: The total count of entities found for the given search input.","title":"LocalSearch-101, -103 FinTechApi.bankSearch"},{"location":"architecture/2-searchBank/#localsearch-102-103-tppbanksearchapibanksearch","text":"The FinTechApi sends a get request to the TppBankSearchApi. Request contains * keyword (searchInput): The bank search input string * start (searchStartIndex): The index of the first result * max (searchMaxResult): the max number of entries to return with the response. TppBankSearchApi returns a search result with following information. * List : found entries. * searchInput: The bank search input string (might have been normalized in the backend). * searchStartIndex: The index of the first result * searchMaxResult: The max number of entries to return with the response. * searchTotalResult: The total count of entities found for the given search input.","title":"LocalSearch-102, -103 TppBankSearchApi.bankSearch"},{"location":"architecture/2-searchBank/#localsearch-104-fintechapi-return-200_banksearchresult","text":"Result returned to FinTechUI contains same information as in LocalSearch-103 and addition session management information like: * sessionState: provided in the response body. Used read the FinTechLoginSessionCookie. * FinTechLoginSessionCookie: provided in the Set-Cookie header.","title":"LocalSearch-104 FinTechApi return 200_BankSearchResult"},{"location":"architecture/2-searchBank/#localsearch-105-displaysearchscreen","text":"","title":"LocalSearch-105 displaySearchScreen"},{"location":"architecture/2-searchBank/#localsearch-106-110-enterkeyword-localsearchsearch","text":"As the PSU enters search keywords, the FinTechUI issues a search request to the LocalSearch that performs the search operation locally and returns corresponding result that is displayed to the PSU on the go.","title":"LocalSearch-106 .. 110 enterKeyword, LocalSearch.search"},{"location":"architecture/2-searchBank/#new-idioms","text":"","title":"New Idioms"},{"location":"architecture/2-searchBank/#discriminator","text":"The searchInput object passed to FinTechApi in this case is called discriminator and is used to reduce the extent of records to be included in the local search. E.g.: c=DE could limit the search to bank in Germany. If for example the TPP does not support some banks, he can include that information in the searchInput-String.","title":"Discriminator"},{"location":"architecture/2-searchBank/#localsearch","text":"This is the UI-Komponent that operates (like lucene) on a local search index in the UI-Application. The technology used to implement this search is specific to the UI technology. JavaScript based technologies might use tools like: elasticlunr","title":"LocalSearch"},{"location":"architecture/2-searchBank/#caching-list","text":"The List return for the purpose of a local search can be cached by the FinTechApi to reduce quantity of request issued to the TppBankSearchApi","title":"Caching List"},{"location":"architecture/3-selectBank/","text":"Select Bank General terms defined in the dictionary Definition The bank selection allows to download the BankProfile of a bank and cache it in the consent session for reuse while processing the PSU request. It can also be used to display bank details to the PSU at selection. Diagram Use Case Steps Use cases for this API: SelBnk-001 FinTechUI.selectBank PSU selects a bank from the list of banks displayed by the FinTechUI SelBnk-002 FinTechApi.loadBankProfile FinTechUI sends a load loadBankProfile request to FinTechAPI passing the bankId SelBnk-003 TppBankSearchApi.loadBankProfile FinTechAPI sends a load loadBankProfile request to TppBankSearchApi passing the bankId SelBnk-004 & 005 Return 200_BankProfile TppBankSearchApi returns the BankProfine object matching the given bankId. SelBnk-005 FinTechUI.displayBankProfile The displayed bank profile also displays banking api services offered by the selected bank.","title":"Select bank"},{"location":"architecture/3-selectBank/#select-bank","text":"General terms defined in the dictionary","title":"Select Bank"},{"location":"architecture/3-selectBank/#definition","text":"The bank selection allows to download the BankProfile of a bank and cache it in the consent session for reuse while processing the PSU request. It can also be used to display bank details to the PSU at selection.","title":"Definition"},{"location":"architecture/3-selectBank/#diagram","text":"","title":"Diagram"},{"location":"architecture/3-selectBank/#use-case-steps","text":"Use cases for this API:","title":"Use Case Steps"},{"location":"architecture/3-selectBank/#selbnk-001-fintechuiselectbank","text":"PSU selects a bank from the list of banks displayed by the FinTechUI","title":"SelBnk-001 FinTechUI.selectBank"},{"location":"architecture/3-selectBank/#selbnk-002-fintechapiloadbankprofile","text":"FinTechUI sends a load loadBankProfile request to FinTechAPI passing the bankId","title":"SelBnk-002 FinTechApi.loadBankProfile"},{"location":"architecture/3-selectBank/#selbnk-003-tppbanksearchapiloadbankprofile","text":"FinTechAPI sends a load loadBankProfile request to TppBankSearchApi passing the bankId","title":"SelBnk-003 TppBankSearchApi.loadBankProfile"},{"location":"architecture/3-selectBank/#selbnk-004-005-return-200_bankprofile","text":"TppBankSearchApi returns the BankProfine object matching the given bankId.","title":"SelBnk-004 &amp; 005 Return 200_BankProfile"},{"location":"architecture/3-selectBank/#selbnk-005-fintechuidisplaybankprofile","text":"The displayed bank profile also displays banking api services offered by the selected bank.","title":"SelBnk-005 FinTechUI.displayBankProfile"},{"location":"architecture/4a-aisListOfAccounts/","text":"List Of Accounts General terms defined in the dictionary Definition Request the list of bank accounts associated with this PSU's online banking account at the target ASPSP. If there is any reference to an existing account information consent (AisConsent) stored in the database of the TPP, the TPP will use this consent reference to forward the service request to the OpenBanking interface of the ASPSP. If there is no such reference in the database of the TPP, the TPP will respond the FinTech to redirect the PSU to the ConsentAuthorizationApi of the TPP. In order to uniquely identify the requesting PSU, the TPP uses a unique reference made out of: - the fintechId : the unique identifier of this FinTech in the realm of the TPP. This parameter is read from the FinTechContext transported as jwt-Token in the Authorization header of each FinTech request to the TPP. - the psu-id@fintech : the unique identifier of the PSU in the realm of the FinTech. This parameter is transported in the HttpHeader named: Fintech-User-ID Diagram Use Cases LoA-010 FinTechUI.displayBankServices The result of a bank selection is that the FinTechUI displays the BankProfile to the PSU. The bank profile contains the list of services offered by the selected bank. For account information, this list generally contains only the first service \"listOfAccounts\" as all other account information services rely on the target account selected and identified by account-id. LoA-020 : FinTechUI.selectService(listOfAccounts) Once selected by the PSU, the FinTechUI forwards the service selected to the FinTechApi. In this case \"listOfAccounts\". The selection might be accompanied with some service specifications. For listOfAccounts, the option withBalance can be added to indicate that the balance has to be returned as well. LoA-030 : FinTechApi.listOfAccounts Call specification: listOfAccounts SessionCookie,X-XSRF-TOKEN . The FinTechUI issues a listOfAccounts request to the FinTechAPI with: - SessionCookie and X-XSRF-TOKEN : The SessionCookie used to maintain association between FinTechUI and FinTechApi. It holds a session identifier. A corresponding XSRF-TOKEN is sent back and forth though the header and used to authenticate the SessionCookie. - The bank-id: passed as a query parameter and referencing the given BankProfile that contains meta information associated with the selected Bank. - withBalance: optional, instruct the TPP to request balances associated with each account. - X-Request-ID: unique identifier that identifies this request throughout the entire processing chain. Shall be contained in HTTP Response as well. LoA-031 : FinTechApi.checkAuthorization Call specification: : checkAuthorization(SessionCookie,\\nX-XSRF-TOKEN):psu-id@fintech Before proceeding with the request, the FinTechApi must validate the request for it authenticity and extract a unique identifier of the PSU in the world of the FinTech (psu-id@fintech). This validation also include the matching of the used cookie against the provided XSRF-Token. LoA-032 : FinTechApi.userAgentContext Parses the HTTP request and extract information associated with the user agent (see UserAgentContext ). The UserAgentContext describes details associated with the user agent of the PSU. Generally not visible in the API as they are automatically provided by the user agent. The purpose is to transfer context specific information on both current Request and PsuUserAgent. Those information might later be required by the ASPSP like. Below is a non exhaustive list of UserAgent specific context information: * IP-Address, * IP-Port, * Accept, * Accept-Charset, * Accept-Encoding, * Accept-Language, * Device-ID, * User-Agent, * PSU-Geo-Location, * Http-Method. LoA-033 : FinTechApi.buildUrlTemplates Builds URL templates used to redirect control to the FinTechUI application. Generate a state parameter that will be used to protect the redirect process and add it as a query parameter to the built Fintech-Redirect-URL templates that are added to the request. The templates have the form Fintech-Redirect-URL-[OK|NOK] . Both the OK-URL and the NOK-URL are used to redirect control to the FinTechUI application from the TPP consent authorization interface (ConsentAuthorizationApi), as we set a RedirectCookie in the FinTechUI before redirecting the PSU to the ConsentAuthorizationApi. This RedirectCookie must be transported back to the FinTechApi with the redirect call back to the FinTech. - In order to distinguish redirect cookie associated with different authorization flows, we scope the Fintech-Redirect-URL with a dynamic path parameter \"$AUTH-ID\". This must be set as part of the cookie path of the RedirectCookie returned to the FinTechUI. - In order to protect the Fintech-Redirect-URL against XSRF, we use the state parameter. This state parameter is defined at initialization of the request, and added as a query parameter to the Fintech-Redirect-URL. LoA-034 : FinTechApi.loadServiceSession Uses the given psu-id and service type to load a corresponding service session if the FinTech judges the request of the PSU is the repetition of an existing service request. LoA-040 : TppBankingApi.listOfAccounts Forwards the PSU request to TPP with following associated context informations: Authorization: FinTechContext : contains static identification information associated with the FinTech. Fintech-User-ID: psu-id@fintech: the unique identifier of the PSU in the realm of the FinTech Service-Session-ID: a unique identifier of the service request. This is returned by the TPP as a response to the first HTTP-Request associated with this service request. Fintech-Redirect-URL-[OK|NOK] : these are URL used to redirect control to the FinTechUI application. See LoA-033 . UserAgentContext: See LoA-032 . Bank-ID: See LoA-030 . withBalance: See LoA-030 . X-Request-ID: See LoA-030 . LoA-041 TppBankingApi.checkAuthorization verifies the authenticity of the Authorization header \"FinTechContext\". Returns the extracted fintechId. LoA-042 TppBankingApi.serviceSpec Put service parameter in a serviceSpec map for further processing. LoA-043 TppBankingApi.serviceContext Put all objects associated with the call into a generic ServiceContext object. LoA-050 BankingProtocolFacade.service Forwards the call to the BankingProtocolFacade. LoA-051, -052 BankingProtocolFacade.selectBankingProtocol If the serviceSessionId exists, selects the BankingProtocol based on the given serviceSessionId. If the is the very first request, there is no serviceSessionId and the TppBankingApi selects the BankingProtocol based on the given: BankId and ServiceType (in this case \"listOfAccounts\") LoA-060 : BankingProtocol.service The BankingProtocol associated with the given BankProfile decides on how to proceed with the request after loading and analyzing an eventually stored TppConsentSession. LoA-061 : BankingProtocol.define This step maps service parameter to be used in further processing to variable names for beter readability in subsequent calls. LoA-062 .. -064 : BankingProtocol.handelServiceSession If there is an existing serviceSessionId, it will be introspected to extract the id (bpServiceSessionID) and the key (bpServiceSessionKey) used to read and decrypt the persistent service session. The existing service session will be loaded. If the is no existing service session, a new one will be instantiated, returning the newly persistet ServiceSession and the corresponding encryption key. Note that all information associated with the service call are stored encrypted in the service session. The returned serviceSessionKey that can be used to decrypt the serviceSession. LoA-065 : BankingProtocol.externalId Creates an external serviceSessionId based on the internal bpServiceSessionId and bpServiceSessionKey. LoA-066 : BankingProtocol.findMatchingConsent use information provided to find a consent matching the service request. LoA-067 : BankingProtocol.updateServiceSession Finaly updates the persistent service session with all prepared information. LoA-070 .. -073 : No Suitable Consent Present: Create an Authorization Session If there is no suitable consent available, the BankingProtocol updates the ServiceSession with a new authorization session identified by an auth-id (unique in the scope of the user/serviceSession). - The auth-id: is an identifier of the authorization instance in the context of this PSU. It can be a short alphanumeric string like \"asrfvs\" used to isolate parallel active authorization sessions from each order. - In LoA-071 mapFinTechRedirectUrl this auth-id will be used by the FinTech to set the path of the corresponding RedirectSession and also used to fill the Fintech-Redirect-URL-[OK|NOK] . - The redirectCode generated contains the serviceSessionID and the auth-id. The redirectCode is used by the ConsentAuthorizationApi of the TPP to access the service record. - The tppConsentEntryPoint is the static entry point of the nConsentAuthorisationApi extended with the query parameter redirectCode. LoA-074, LoA-075: Initiate Redirect By returning the BankingProtocolResponse (authId,serviceSessionID,tppConsentEntryPoint,redirectExp), the BankingProtocol instructs the BankingProtocolFacade, and the TppBankingApi to initiate a redirect of the PSU to the ConsentAuthorizationApi. LoA-076 TppBankingApi:303_SeeOther The TppBankingApi turns the BankingProtocolResponse into a 303_SeeOther(authId,serviceSessionID,\\ntppConsentEntryPoint,redirectExp). LoA-077 FinTechApi.storeServiceSessionId Before return control to the FinTechUI, the FinTechApi stores the returned serviceSessionID for future references. LoA-078 FinTechApi.expireSessionCookie(SessionCookie) Upon redirecting the PSU user agent to the ConsentAuthorizationApi, the regular session between the FinTechUI and the FinTechApi has to be removed in order to avoid unwanted access to the FinTechApi. Even though this is not mandatory as the SessionCookie is protected by an X-XSRF-TOKEN, it is still advisable to do this as the X-XSRF-TOKEN is eventually accessible to javascript code running in the UserAgent. LoA-079 FinTechApi.createRedirectCookie Purpose: The RedirectCookie is used make sure that the UserAgent that started a redirect flow is the same as the one the terminated that redirect flow. This is essential to assume that the PSU physically using this user agent is the same as the one that accessed the authorization interfaces of the (TPP resp. ASPSP). The RedirectCookie: is therefore set by the origin of the redirection (FinTech) and must be transported to the FinTechApi when control is sent back to the FinTechUI. Expiration: This RedirectCookie shall be set for the max time we think the PSU needs to complete authorization of the corresponding consent. Therefore the expiration of this RedirectCookie generally has a longer life span than the expiration of a regular SessionCookie. CookiePath (auth-id): This RedirectCookie must be bound to the \"$AUTH-ID\" path of the Fintech-Redirect-URLs (defined as Fintech-Redirect-URL-[OK|NOK] ). This way, it does no need to be transported to the FinTechApi with any other request. XSRF Protection (state): This RedirectCookie is also protected by a \"state\" query parameter that is available to the Fintech-Redirect-URLs. User Session : Generally processing a successful redirect is equivalent to a successful re-establishment of the user session. Meaning that FinTechApi can set a new SessionCookie to maintain the session with the PSU without a new explicit login of the PSU. LoA-080 : FinTechApi redirects userAgent to the ConsentAuthorisationApi The service response carries a response code 302 instructing the FinTechUI to redirect the PsuUserDevice to the ConsentAuthorisationApi, with following information: - redirectCode : attached as a query parameter - SessionCookie : for deletion - RedirectCookie : with the expected duration of the consent authorization. LoA-090 Suitable Consent Present If there is a suitable consent reference in the database of the TPP, this will be loaded and used to forward request to the ASPSP. LoA-091 : Forward Service Request to ASPSP Service request is forwarded to the AspspBankingApi together with a reference to an AisConsent. The Associated TppContext contains TPP identifying information. LoA-092 .. LoA-95 : Returned Service Response if sent and displayed to the PSU. The returned ListOfAccountsResponse is wrapped into a BankingProtocolResponse that will travel through the call chain back to the FinTechApi. LoA-096 FinTechApi.storeServiceSessionId The FinTechApi will first store the service session for future reference. LoA-096 FinTechApi:200_Accounts The FinTechApi returns the payload to the FinTechUI together with a new SessionCookie.","title":"List of Accounts"},{"location":"architecture/4a-aisListOfAccounts/#list-of-accounts","text":"General terms defined in the dictionary","title":"List Of Accounts"},{"location":"architecture/4a-aisListOfAccounts/#definition","text":"Request the list of bank accounts associated with this PSU's online banking account at the target ASPSP. If there is any reference to an existing account information consent (AisConsent) stored in the database of the TPP, the TPP will use this consent reference to forward the service request to the OpenBanking interface of the ASPSP. If there is no such reference in the database of the TPP, the TPP will respond the FinTech to redirect the PSU to the ConsentAuthorizationApi of the TPP. In order to uniquely identify the requesting PSU, the TPP uses a unique reference made out of: - the fintechId : the unique identifier of this FinTech in the realm of the TPP. This parameter is read from the FinTechContext transported as jwt-Token in the Authorization header of each FinTech request to the TPP. - the psu-id@fintech : the unique identifier of the PSU in the realm of the FinTech. This parameter is transported in the HttpHeader named: Fintech-User-ID","title":"Definition"},{"location":"architecture/4a-aisListOfAccounts/#diagram","text":"","title":"Diagram"},{"location":"architecture/4a-aisListOfAccounts/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/4a-aisListOfAccounts/#loa-010-fintechuidisplaybankservices","text":"The result of a bank selection is that the FinTechUI displays the BankProfile to the PSU. The bank profile contains the list of services offered by the selected bank. For account information, this list generally contains only the first service \"listOfAccounts\" as all other account information services rely on the target account selected and identified by account-id.","title":"LoA-010 FinTechUI.displayBankServices"},{"location":"architecture/4a-aisListOfAccounts/#loa-020-fintechuiselectservicelistofaccounts","text":"Once selected by the PSU, the FinTechUI forwards the service selected to the FinTechApi. In this case \"listOfAccounts\". The selection might be accompanied with some service specifications. For listOfAccounts, the option withBalance can be added to indicate that the balance has to be returned as well.","title":"LoA-020 : FinTechUI.selectService(listOfAccounts)"},{"location":"architecture/4a-aisListOfAccounts/#loa-031-fintechapicheckauthorization","text":"Call specification: : checkAuthorization(SessionCookie,\\nX-XSRF-TOKEN):psu-id@fintech Before proceeding with the request, the FinTechApi must validate the request for it authenticity and extract a unique identifier of the PSU in the world of the FinTech (psu-id@fintech). This validation also include the matching of the used cookie against the provided XSRF-Token.","title":"LoA-031 : FinTechApi.checkAuthorization"},{"location":"architecture/4a-aisListOfAccounts/#loa-034-fintechapiloadservicesession","text":"Uses the given psu-id and service type to load a corresponding service session if the FinTech judges the request of the PSU is the repetition of an existing service request.","title":"LoA-034 : FinTechApi.loadServiceSession"},{"location":"architecture/4a-aisListOfAccounts/#loa-040-tppbankingapilistofaccounts","text":"Forwards the PSU request to TPP with following associated context informations: Authorization: FinTechContext : contains static identification information associated with the FinTech. Fintech-User-ID: psu-id@fintech: the unique identifier of the PSU in the realm of the FinTech Service-Session-ID: a unique identifier of the service request. This is returned by the TPP as a response to the first HTTP-Request associated with this service request. Fintech-Redirect-URL-[OK|NOK] : these are URL used to redirect control to the FinTechUI application. See LoA-033 . UserAgentContext: See LoA-032 . Bank-ID: See LoA-030 . withBalance: See LoA-030 . X-Request-ID: See LoA-030 .","title":"LoA-040 : TppBankingApi.listOfAccounts"},{"location":"architecture/4a-aisListOfAccounts/#loa-041-tppbankingapicheckauthorization","text":"verifies the authenticity of the Authorization header \"FinTechContext\". Returns the extracted fintechId.","title":"LoA-041 TppBankingApi.checkAuthorization"},{"location":"architecture/4a-aisListOfAccounts/#loa-042-tppbankingapiservicespec","text":"Put service parameter in a serviceSpec map for further processing.","title":"LoA-042 TppBankingApi.serviceSpec"},{"location":"architecture/4a-aisListOfAccounts/#loa-043-tppbankingapiservicecontext","text":"Put all objects associated with the call into a generic ServiceContext object.","title":"LoA-043 TppBankingApi.serviceContext"},{"location":"architecture/4a-aisListOfAccounts/#loa-051-052-bankingprotocolfacadeselectbankingprotocol","text":"If the serviceSessionId exists, selects the BankingProtocol based on the given serviceSessionId. If the is the very first request, there is no serviceSessionId and the TppBankingApi selects the BankingProtocol based on the given: BankId and ServiceType (in this case \"listOfAccounts\")","title":"LoA-051, -052 BankingProtocolFacade.selectBankingProtocol"},{"location":"architecture/4a-aisListOfAccounts/#loa-061-bankingprotocoldefine","text":"This step maps service parameter to be used in further processing to variable names for beter readability in subsequent calls.","title":"LoA-061 : BankingProtocol.define"},{"location":"architecture/4a-aisListOfAccounts/#loa-062-064-bankingprotocolhandelservicesession","text":"If there is an existing serviceSessionId, it will be introspected to extract the id (bpServiceSessionID) and the key (bpServiceSessionKey) used to read and decrypt the persistent service session. The existing service session will be loaded. If the is no existing service session, a new one will be instantiated, returning the newly persistet ServiceSession and the corresponding encryption key. Note that all information associated with the service call are stored encrypted in the service session. The returned serviceSessionKey that can be used to decrypt the serviceSession.","title":"LoA-062 .. -064  : BankingProtocol.handelServiceSession"},{"location":"architecture/4a-aisListOfAccounts/#loa-065-bankingprotocolexternalid","text":"Creates an external serviceSessionId based on the internal bpServiceSessionId and bpServiceSessionKey.","title":"LoA-065 : BankingProtocol.externalId"},{"location":"architecture/4a-aisListOfAccounts/#loa-066-bankingprotocolfindmatchingconsent","text":"use information provided to find a consent matching the service request.","title":"LoA-066 : BankingProtocol.findMatchingConsent"},{"location":"architecture/4a-aisListOfAccounts/#loa-067-bankingprotocolupdateservicesession","text":"Finaly updates the persistent service session with all prepared information.","title":"LoA-067 : BankingProtocol.updateServiceSession"},{"location":"architecture/4a-aisListOfAccounts/#loa-074-loa-075-initiate-redirect","text":"By returning the BankingProtocolResponse (authId,serviceSessionID,tppConsentEntryPoint,redirectExp), the BankingProtocol instructs the BankingProtocolFacade, and the TppBankingApi to initiate a redirect of the PSU to the ConsentAuthorizationApi.","title":"LoA-074, LoA-075: Initiate Redirect"},{"location":"architecture/4a-aisListOfAccounts/#loa-092-loa-95-returned-service-response-if-sent-and-displayed-to-the-psu","text":"The returned ListOfAccountsResponse is wrapped into a BankingProtocolResponse that will travel through the call chain back to the FinTechApi.","title":"LoA-092 .. LoA-95 : Returned Service Response if sent and displayed to the PSU."},{"location":"architecture/4a-aisListOfAccounts/#loa-096-fintechapistoreservicesessionid","text":"The FinTechApi will first store the service session for future reference.","title":"LoA-096 FinTechApi.storeServiceSessionId"},{"location":"architecture/4a-aisListOfAccounts/#loa-096-fintechapi200_accounts","text":"The FinTechApi returns the payload to the FinTechUI together with a new SessionCookie.","title":"LoA-096 FinTechApi:200_Accounts"},{"location":"architecture/4b-aisListOfTransactions/","text":"List Of Transactions General terms defined in the dictionary Definition Request the list of transactions for a given bank account. If there is any reference to an existing account information consent (AisConsent) stored in the database of the TPP, the TPP will use this consent reference to forward the service request to the OpenBanking interface of the ASPSP. If there is no such reference in the database of the TPP, the TPP will respond the FinTech to redirect the PSU to the ConsentAuthorizationApi of the TPP. In order to uniquely identify the requesting PSU, the TPP uses a unique reference made out of: - the fintechId : the unique identifier of this FinTech in the realm of the TPP. This parameter is read from the FinTechContext transported as jwt-Token in the Authorization header of each FinTech request to the TPP. - the psu-id@fintech : the unique identifier of the PSU in the realm of the FinTech. This parameter is transported in the HttpHeader named: Fintech-User-ID Diagram Use Cases LoT-010 FinTechUI.displayBankAccount(BankAccount) After receiving the list of accounts, the FinTechUI can dsiplay a single bank account to the PSU. LoT-020 : FinTechUI.selectService(listTransactions) On of the services available when the FinTechUI present bank account details to the PSU is the \"listOfTransactions\". If selected by the PSU, the FinTechUI forwards the service call to the FinTechApi. The selection must be accompanied with some mandatory and optional service specifications. For example in the case of listOfTransactions, this the account-id is part of the request path and indicates the target account. The ListTransactionsSpec is used to describe additional optional request parameters. LoT-030 : FinTechApi.listOfTransactions Call specification: listOfTransactions SessionCookie,X-XSRF-TOKEN,X-Request-ID The FinTechUI issues a listOfTransactions request to the FinTechAPI with: - SessionCookie and X-XSRF-TOKEN : The SessionCookie used to maintain association between FinTechUI and FinTechApi. It holds a session identifier. A corresponding XSRF-TOKEN is sent back and forth though the header and used to authenticate the SessionCookie. - The bank-id: passed as a query parameter and referencing the given BankProfile that contains meta information associated with the selected Bank. - The account-id: is sent as a path parameter and references the target bank account. - dateFrom: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required. For booked transactions, the relevant date is the booking date. For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP. - dateTo: End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given. Might be ignored if a delta function is used. For booked transactions, the relevant date is the booking date. For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP. - deltaList: This data attribute indicates that the FinTech is in favour to get all transactions after the last report access for this PSU on the addressed account. - entryReferenceFrom: This data attribute indicates that the FinTech is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is an implementation of a delta access. If this data element is contained, the entries \"dateFrom\" and \"dateTo\" might be ignored by the ASPSP. - bookingStatus: To support the \"pending\" and \"both\" feature is optional for the ASPSP, Error code if not supported in the online banking frontend Default is \"booked\". - X-Request-ID: unique identifier that identifies this request throughout the entire processing chain. Shall be contained in HTTP Response as well. LoT-031 : FinTechApi.checkAuthorization Call specification: : checkAuthorization(SessionCookie,\\nX-XSRF-TOKEN):psu-id@fintech Before proceeding with the request, the FinTechApi must validate the request for it authenticity and extract a unique identifier of the PSU in the world of the FinTech (psu-id@fintech). This validation also include the matching of the used cookie against the provided XSRF-Token. LoT-032 : FinTechApi.userAgentContext Parses the HTTP request and extract information associated with the user agent (see UserAgentContext ). The UserAgentContext describes details associated with the user agent of the PSU. Generally not visible in the API as they are automatically provided by the user agent. The purpose is to transfer context specific information on both current Request and PsuUserAgent. Those information might later be required by the ASPSP like. Below is a non exhaustive list of UserAgent specific context information: * IP-Address, * IP-Port, * Accept, * Accept-Charset, * Accept-Encoding, * Accept-Language, * Device-ID, * User-Agent, * PSU-Geo-Location, * Http-Method. LoT-033 : FinTechApi.buildUrlTemplates Builds URL templates used to redirect control to the FinTechUI application. Generate a state parameter that will be used to protect the redirect process and add it as a query parameter to the built Fintech-Redirect-URL templates that are added to the request. The templates have the form Fintech-Redirect-URL-[OK|NOK] . Both the OK-URL and the NOK-URL are used to redirect control to the FinTechUI application from the TPP consent authorization interface (ConsentAuthorizationApi), as we set a RedirectCookie in the FinTechUI before redirecting the PSU to the ConsentAuthorizationApi. This RedirectCookie must be transported back to the FinTechApi with the redirect call back to the FinTech. - In order to distinguish redirect cookie associated with different authorization flows, we scope the Fintech-Redirect-URL with a dynamic path parameter \"$AUTH-ID\". This must be set as part of the cookie path of the RedirectCookie returned to the FinTechUI. - In order to protect the Fintech-Redirect-URL against XSRF, we use the state parameter. This state parameter is defined at initialization of the request, and added as a query parameter to the Fintech-Redirect-URL. LoT-034 : FinTechApi.loadServiceSession Uses the given psu-id and service type to load a corresponding service session if the FinTech judges the request of the PSU is the repetition of an existing service request. LoT-040 : TppBankingApi.listOfTransactions Forwards the PSU request to TPP with following associated context informations: Authorization: FinTechContext : contains static identification information associated with the FinTech. Fintech-User-ID: psu-id@fintech: the unique identifier of the PSU in the realm of the FinTech Service-Session-ID: a unique identifier of the service request. This is returned by the TPP as a response to the first HTTP-Request associated with this service request. Fintech-Redirect-URL-[OK|NOK] : these are URL used to redirect control to the FinTechUI application. See LoT-033 . UserAgentContext: See LoT-032 . Bank-ID: See LoT-030 . account-id: See LoT-030 . dateFrom: See LoT-030 . dateTo: See LoT-030 . entryReferenceFrom: See LoT-030 . bookingStatus: See LoT-030 . deltaList: See LoT-030 . X-Request-ID: See LoT-030 . LoT-041 TppBankingApi.checkAuthorization verifies the authenticity of the Authorization header \"FinTechContext\". Returns the extracted fintechId. LoT-042 TppBankingApi.serviceSpec Put service parameter in a serviceSpec map for further processing. LoT-043 TppBankingApi.serviceContext Put all objects associated with the call into a generic ServiceContext object. LoT-050 .. LoT-052 BankingProtocolFacade.service See ListOfAccounts LoT-060 .. LoT-067 : BankingProtocol.service See ListOfAccounts LoA-070 .. -080 : No Suitable Consent Present. Redirect See ListOfAccounts LoA-090 Suitable Consent Present If there is a suitable consent reference in the database of the TPP, this will be loaded and used to forward request to the ASPSP. LoA-091 : Forward Service Request to ASPSP Service request is forwarded to the AspspBankingApi together with a reference to an AisConsent. The Associated TppContext contains TPP identifying information. LoA-092 .. LoA-95 : Returned Service Response The returned ListOfTransactionsResponse is wrapped into a BankingProtocolResponse that will travel through the call chain back to the FinTechApi. LoA-096 FinTechApi.storeServiceSessionId The FinTechApi will first store the service session for future reference. LoA-096 FinTechApi:200_Accounts The FinTechApi returns the payload to the FinTechUI together with a new SessionCookie.","title":"List of Transactions"},{"location":"architecture/4b-aisListOfTransactions/#list-of-transactions","text":"General terms defined in the dictionary","title":"List Of Transactions"},{"location":"architecture/4b-aisListOfTransactions/#definition","text":"Request the list of transactions for a given bank account. If there is any reference to an existing account information consent (AisConsent) stored in the database of the TPP, the TPP will use this consent reference to forward the service request to the OpenBanking interface of the ASPSP. If there is no such reference in the database of the TPP, the TPP will respond the FinTech to redirect the PSU to the ConsentAuthorizationApi of the TPP. In order to uniquely identify the requesting PSU, the TPP uses a unique reference made out of: - the fintechId : the unique identifier of this FinTech in the realm of the TPP. This parameter is read from the FinTechContext transported as jwt-Token in the Authorization header of each FinTech request to the TPP. - the psu-id@fintech : the unique identifier of the PSU in the realm of the FinTech. This parameter is transported in the HttpHeader named: Fintech-User-ID","title":"Definition"},{"location":"architecture/4b-aisListOfTransactions/#diagram","text":"","title":"Diagram"},{"location":"architecture/4b-aisListOfTransactions/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/4b-aisListOfTransactions/#lot-010-fintechuidisplaybankaccountbankaccount","text":"After receiving the list of accounts, the FinTechUI can dsiplay a single bank account to the PSU.","title":"LoT-010 FinTechUI.displayBankAccount(BankAccount)"},{"location":"architecture/4b-aisListOfTransactions/#lot-020-fintechuiselectservicelisttransactions","text":"On of the services available when the FinTechUI present bank account details to the PSU is the \"listOfTransactions\". If selected by the PSU, the FinTechUI forwards the service call to the FinTechApi. The selection must be accompanied with some mandatory and optional service specifications. For example in the case of listOfTransactions, this the account-id is part of the request path and indicates the target account. The ListTransactionsSpec is used to describe additional optional request parameters.","title":"LoT-020 : FinTechUI.selectService(listTransactions)"},{"location":"architecture/4b-aisListOfTransactions/#lot-031-fintechapicheckauthorization","text":"Call specification: : checkAuthorization(SessionCookie,\\nX-XSRF-TOKEN):psu-id@fintech Before proceeding with the request, the FinTechApi must validate the request for it authenticity and extract a unique identifier of the PSU in the world of the FinTech (psu-id@fintech). This validation also include the matching of the used cookie against the provided XSRF-Token.","title":"LoT-031 : FinTechApi.checkAuthorization"},{"location":"architecture/4b-aisListOfTransactions/#lot-034-fintechapiloadservicesession","text":"Uses the given psu-id and service type to load a corresponding service session if the FinTech judges the request of the PSU is the repetition of an existing service request.","title":"LoT-034 : FinTechApi.loadServiceSession"},{"location":"architecture/4b-aisListOfTransactions/#lot-040-tppbankingapilistoftransactions","text":"Forwards the PSU request to TPP with following associated context informations: Authorization: FinTechContext : contains static identification information associated with the FinTech. Fintech-User-ID: psu-id@fintech: the unique identifier of the PSU in the realm of the FinTech Service-Session-ID: a unique identifier of the service request. This is returned by the TPP as a response to the first HTTP-Request associated with this service request. Fintech-Redirect-URL-[OK|NOK] : these are URL used to redirect control to the FinTechUI application. See LoT-033 . UserAgentContext: See LoT-032 . Bank-ID: See LoT-030 . account-id: See LoT-030 . dateFrom: See LoT-030 . dateTo: See LoT-030 . entryReferenceFrom: See LoT-030 . bookingStatus: See LoT-030 . deltaList: See LoT-030 . X-Request-ID: See LoT-030 .","title":"LoT-040 : TppBankingApi.listOfTransactions"},{"location":"architecture/4b-aisListOfTransactions/#lot-041-tppbankingapicheckauthorization","text":"verifies the authenticity of the Authorization header \"FinTechContext\". Returns the extracted fintechId.","title":"LoT-041 TppBankingApi.checkAuthorization"},{"location":"architecture/4b-aisListOfTransactions/#lot-042-tppbankingapiservicespec","text":"Put service parameter in a serviceSpec map for further processing.","title":"LoT-042 TppBankingApi.serviceSpec"},{"location":"architecture/4b-aisListOfTransactions/#lot-043-tppbankingapiservicecontext","text":"Put all objects associated with the call into a generic ServiceContext object.","title":"LoT-043 TppBankingApi.serviceContext"},{"location":"architecture/4b-aisListOfTransactions/#lot-050-lot-052-bankingprotocolfacadeservice","text":"See ListOfAccounts","title":"LoT-050 .. LoT-052 BankingProtocolFacade.service"},{"location":"architecture/4b-aisListOfTransactions/#lot-060-lot-067-bankingprotocolservice","text":"See ListOfAccounts","title":"LoT-060 .. LoT-067 : BankingProtocol.service"},{"location":"architecture/4b-aisListOfTransactions/#loa-070-080-no-suitable-consent-present-redirect","text":"See ListOfAccounts","title":"LoA-070 .. -080 : No Suitable Consent Present. Redirect"},{"location":"architecture/4b-aisListOfTransactions/#loa-092-loa-95-returned-service-response","text":"The returned ListOfTransactionsResponse is wrapped into a BankingProtocolResponse that will travel through the call chain back to the FinTechApi.","title":"LoA-092 .. LoA-95 : Returned Service Response"},{"location":"architecture/4b-aisListOfTransactions/#loa-096-fintechapistoreservicesessionid","text":"The FinTechApi will first store the service session for future reference.","title":"LoA-096 FinTechApi.storeServiceSessionId"},{"location":"architecture/4b-aisListOfTransactions/#loa-096-fintechapi200_accounts","text":"The FinTechApi returns the payload to the FinTechUI together with a new SessionCookie.","title":"LoA-096 FinTechApi:200_Accounts"},{"location":"architecture/5-redirectPsuToConsentAPI/","text":"Initiate AisConsent Diagram InitConsent-010 ConsentAuthorisationApi The redirect starts with a get request to ConsentAuthorisationApi.auth. The entryPoint of the ConsentAuthorisationApi for processing a consent initiated on the TppBankingApi side. InitConsent-020 BankingProtocolFacade.redirectSession(redirectCode) The ConsentAuthorisationApi forwards the redirect call to the BankingProtocolFacade. InitConsent-030 BankingProtocolFacade.loadDecryptRedirectSession(redirectCode) The redirectCOde is used to load and decrypt the redirecSession. InitConsent-031 BankingProtocolFacade.selectBankingProtocol(serviceSessionId) BankingProtocolFacade will read the serviceSessionId from the redirectSession and use it to load the matching BankingProtocol. InitConsent-040 BankingProtocol.redirectSession(serviceSessionId, authId) The BankingProtocolFacade forwards the redirect call to the BankingProtocol. InitConsent-041, -042 : BankingProtocol.handelServiceSession The serviceSessionID will be introspected to extract the bpServiceSessionID and the bpServiceSessionKey used to read and decrypt the persistent service session PreAuthentication Required Some OpenBanking protocols required the PsuId to be provided with the very initial consent initiation request. In some cases, the OpenBanking protocol will specify a way to collect the PSU identity. This is the approach taken by the AuthPreStep as defined by the NextGenPSD2 protocol. In some other cases, the OpenBanking will not define any way of collecting this PSU identity. In such a case, the PsuIdentity will be collected using a UI defined by the TPP. Depending on which interface is taken to collect the PsuIdentity, we will have to mark if this collected identity is authenticated or not. If the identity collection interface allow the provision of a password and verifycation of the association between the given identity and the password, we call this an authenticated identity. If the interface only provide a collection of the PsuIdentity without proof of ownership of this identity, will call this an unauthenticated identity. InitConsent-060 BankingProtocol:BankingProtocolResponse Inputs: (seviceSessionId, authId) If the protocol requires a PsuIdentity and does not specify an identity provider (e.g.: oAuth2) used to collect that identity, we assume the BankingProtocol is requesting the ConsentAuthorisationApi to collect the identity unauthenticated. In this case, the BankingProtocol will return an BankingProtocolResponse to instruct the BankingProtocolFacade to collect the identity of the PSU. The result carries following parameters: The seviceSessionId: contains information later used by the BankingProtocol to load the ServiceSession. The authId: references this authorization instance in the scope of a service session, as a service request can involve more that one authorization session. InitConsent-061 BankingProtocol:BankingProtocolResponse Inputs: (seviceSessionId, authId) The BankingProtocolFacade instructs the ConsentAuthorisationApi to collect the identity of the PSU. InitConsent-062 ConsentAuthorisationApi.createSessionCookie Inputs: (seviceSessionId, authId) Returns: SessionCookie,state The ConsentAuthorisationApi creates a SessionCookie containing information provided in the call, generates a state parameter to protect the SessionCookie and redirects the call to the psuIdScreen of the ConsentAuthorisationUI. InitConsent-063 ConsentAuthorisationUI.redirect302 Specification: redirect302[SessionCookie,ConsentAuthorisationUI.psuIdScreen() The ConsentAuthorisationApi instructs the PsuUserDevice to redirect the PSU to the psuIdScreen of the ConsentAuthorisationUI. InitConsent-064 ConsentAuthorisationUI:displayPsuIdScreen The ConsentAuthorisationUI displays the psuIdScreen to the PSU. InitConsent-065 ConsentAuthorisationUI.enterPsuId The PSU enters the aspsp's PsuId in the filed provided by the ConsentAuthorisationUI. InitConsent-066 ConsentAuthorisationApi.updatePsuIdentification Spec: updatePsuIdentification SessionCookie, X-XSRF-TOKEN The ConsentAuthorisationUI sends the the collected data to the ConsentAuthorisationApi. InitConsent-067 ConsentAuthorisationApi.validateSessionCookie Inputs: (SessionCookie,xsrfToken) Results: seviceSessionId, authId The ConsentAuthorisationApi uses the provided xsrfToken to validate authenticity of the SessionCookie and the extract processing information out of the cookie. InitConsent-068 BankingProtocolFacade.updatePsuIdentification Spec: updatePsuIdentification(psu-id@tpp, psu-id@aspsp, seviceSessionId, authId) The ConsentAuthorisationApi forwards the call to the BankingProtocolFacade. InitConsent-069 BankingProtocolFacade.selectBankingProtocol Spec: selectBankingProtocol(protocolId):BankingProtocol The BankingProtocolFacade uses the provided protocolId to select the target BankingProtocol. InitConsent-070 BankingProtocol.updatePsuIdentification Spec: updatePsuIdentification(psu-id@tpp, psu-id@aspsp, seviceSessionId ,authId) The BankingProtocolFacade forwards the call to the BankingProtocol. InitConsent-080 BankingProtocol:BankingProtocolResponse Inputs: (seviceSessionId, authId, idpUrl) If the protocol requires a PsuIdentity and do specify an identity provider (e.g.: oAuth2) used to collect that identity, we assume the idp is going to authenticate the PSU and therefore, the BankingProtocol will return a BankingProtocolResponse to instruct the BankingProtocolFacade to send the PSU to the specified Idp. The returned result carries following parameters: The seviceSessionId : contains information later used by the BankingProtocol to laod the ServiceSession. The authId: references this authorization instance in the scope of a service session, as a service request can involve more that one authorization session. The idpUrl the url of the idp used to collect the psu identity on behalf of the ASPSP. InitConsent-081 BankingProtocolFacade:BankingProtocolResponse Inputs: (protocolId,seviceSessionId, serviceSessionKey,authId,idpUrl) The BankingProtocolFacade instructs the ConsentAuthorisationApi to collect the identity of the PSU. InitConsent-082 ConsentAuthorisationApi.createSessionCookie Inputs: (seviceSessionId, authId, idpUrl) Returns: SessionCookie,state The ConsentAuthorisationApi creates a SessionCookie containing information provided in the call, generates a state parameter to protect the SessionCookie and redirects the call to the redirectInfoPage of the ConsentAuthorisationUI. InitConsent-083 ConsentAuthorisationUI.redirect302 Specification: redirect302[SessionCookie, ConsentAuthorisationUI.psuIdScreen() The ConsentAuthorisationApi instructs the PsuUserDevice to redirect the PSU to the redirectInfoPage of the ConsentAuthorisationUI. InitConsent-084 ConsentAuthorisationUI:displayRedirectInfoPage The ConsentAuthorisationUI displays the redirectInfoPage to the PSU. InitConsent-085 ConsentAuthorisationUI.confirmRedirect The PSU confirms the redirect to the idp of the ASPSP. InitConsent-086 ConsentAuthorisationApi.confirmRedirect Spec: confirmRedirect SessionCookie, X-XSRF-TOKEN The ConsentAuthorisationUI sends a redirect confirmation to the ConsentAuthorisationApi. InitConsent-087 ConsentAuthorisationApi.validateSessionCookie Inputs: (SessionCookie,xsrfToken) Results: seviceSessionId, authId, idpUrl The ConsentAuthorisationApi uses the provided xsrfToken to validate authenticity of the SessionCookie and the extract processing information out of the cookie. InitConsent-088 ConsentAuthorisationApi.createRedirectCookie Inputs: (seviceSessionId, authId, idpUrl) Results: RedirectCookie,state The ConsentAuthorisationApi creates a RedirectCookie containing those processing information and following specification: path: ConsentAuthorisationUI.fromIdpAuth exp: expected time needed by the PSU to authenticate with the idp of the ASPSP redirect-uri: ConsentAuthorisationUI.fromIdpAuth . This the uri that is going to be used by the idp to redirect the PSU back to the TPP. state: this is the state used to verify authenticity of the RedirectCookie. InitConsent-089 ConsentAuthorisationApi:redirect302 Spec: redirect302[RedirectCookie,\\nOnlineBankingApi.redirectEntryPoint]\\n() The ConsentAuthorisationApi instructs the ConsentAuthorisationUI to redirect the PSU to the idp of the ASPSP. InitConsent-091 BankingProtocolFacade.fromIdpAuth Spec: fromIdpAuth UserAgentContext,\\nRedirectCookie \\n With this call, the idp of the APSPS redirects the PsuUserDevice to the ConsentAuthorisationUI of the TPP. This call will InitConsent-092 ConsentAuthorisationApi.validateRedirectCookie Inputs: (RedirectCookie,state) Results: seviceSessionId, authId, idpUrl The ConsentAuthorisationApi uses the provided state parameter to validate authenticity of the RedirectCookie and then extract processing information out of the cookie. InitConsent-093 BankingProtocolFacade.code2Token Inputs: (code, seviceSessionId, authId, idpUrl) The ConsentAuthorisationApi forwards the call to the BankingProtocolFacade. InitConsent-094 BankingProtocolFacade.selectBankingProtocol Spec: selectBankingProtocol(seviceSessionId):BankingProtocol The BankingProtocolFacade uses the provided seviceSessionId to select the target BankingProtocol. InitConsent-095 BankingProtocol.code2Token Spec: code2Token(code, seviceSessionId, authId, idpUrl) The BankingProtocolFacade forwards the call to the target BankingProtocol. InitConsent-096 OnlineBankingApi.code2Token Spec: GET:code2Token TppContext The BankingProtocol calls the token endpoint of the idp of the ASPSP to request the token matching the returned authorization code. InitConsent-097 OnlineBankingApi:token The idp of the ASPSP returns a token to the banking protocol. InitConsent-098 BankingProtocol.psuId The banking protocol extracts the needed psu-id from the returned token. InitConsent-100 AspspBankingApi.initiateConsent Spec: initiateConsent UserAgentContext, TppContext, psu-id@aspsp The BankingProtocol sends an initiate consent request to the OpenBanking interface of the ASPSP (aka AspspBankingApi). InitConsent-101 AspspBankingApi:200_OK Spec: 200_OK(AisConsent, AspspRedirectInfo, AspspChallenges, seviceSessionId) The OpenBanking interface of the ASPSP returns information necessary to start the consent authorization process. AisConsent : a reference to the started ASPSP consent session AspspRedirectInfo: Information needed in case the TPP has to redirect the PSU to the OnlineBankingApi of the ASPSP AspspChallenges: Challenges and SCA meta information in case the TPP will have to collect PSU credentials at the ConsentAuthorisationApi. seviceSessionId: needed to read the serviceSession. InitConsent-102 BankingProtocol.addToServiceSession Spec: addToServiceSession(AisConsent,\\nAspspRedirectInfo,\\nAspspChallenges) The BankingProtocol stores the response of the call in the ServiceSession that also includes information like: protocolId, seviceSessionId, serviceSessionKey, authId. InitConsent-103 BankingProtocol:ServiceSession The BankingProtocol also returns the ServiceSession containing information necessary to start the consent authorization process. InitConsent-104 BankingProtocolFacade:ServiceSession The BankingProtocolFacade returns the ServiceSession containing information necessary to start the consent authorization process. InitConsent-105 ConsentAuthorisationApi.prepareResponse -Specs: prepareResponse(ServiceSession):xsrfToken,AuthorizeResponse,SessionCookie The ConsentAuthorisationApi prepares the response, producing: - AuthorizeResponse : that will be sent back to the ConsentAuthorisationUI and used to manage interaction with the PSU and the ConsentAuthorisationUI. - SessionCookie : that will be used to authenticate the interaction between the ConsentAuthorisationUI and the ConsentAuthorisationApi - xsrfToken : used to authenticate SessionCookie InitConsent-106 ConsentAuthorisationUI.displayBankLoginPage Spec: displayBankLoginPage SessionCookie,X-XSRF-Token If the AuthorizeResponse indicates that the consent authorization is going to happen at the interface of the TPP (ConsentAuthorisationApi), the initial screen for the processing of challenges will be displayed. InitConsent-107 ConsentAuthorisationUI.displayRedirectInfoPage Spec: displayRedirectInfoPage SessionCookie,X-XSRF-Token If the AuthorizeResponse indicates that the consent authorization process is going to happen at the interface of the ASPSP, the redirect info page will be displayed to the PSU, waiting for a confirmation to be redirected to the ASPSP online banking interface.","title":"Redirect to Consent Authorization API"},{"location":"architecture/5-redirectPsuToConsentAPI/#initiate-aisconsent","text":"","title":"Initiate AisConsent"},{"location":"architecture/5-redirectPsuToConsentAPI/#diagram","text":"","title":"Diagram"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-010-consentauthorisationapi","text":"The redirect starts with a get request to ConsentAuthorisationApi.auth. The entryPoint of the ConsentAuthorisationApi for processing a consent initiated on the TppBankingApi side.","title":"InitConsent-010 ConsentAuthorisationApi"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-020-bankingprotocolfacaderedirectsessionredirectcode","text":"The ConsentAuthorisationApi forwards the redirect call to the BankingProtocolFacade.","title":"InitConsent-020 BankingProtocolFacade.redirectSession(redirectCode)"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-030-bankingprotocolfacadeloaddecryptredirectsessionredirectcode","text":"The redirectCOde is used to load and decrypt the redirecSession.","title":"InitConsent-030 BankingProtocolFacade.loadDecryptRedirectSession(redirectCode)"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-031-bankingprotocolfacadeselectbankingprotocolservicesessionid","text":"BankingProtocolFacade will read the serviceSessionId from the redirectSession and use it to load the matching BankingProtocol.","title":"InitConsent-031 BankingProtocolFacade.selectBankingProtocol(serviceSessionId)"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-040-bankingprotocolredirectsessionservicesessionid-authid","text":"The BankingProtocolFacade forwards the redirect call to the BankingProtocol.","title":"InitConsent-040 BankingProtocol.redirectSession(serviceSessionId, authId)"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-041-042-bankingprotocolhandelservicesession","text":"The serviceSessionID will be introspected to extract the bpServiceSessionID and the bpServiceSessionKey used to read and decrypt the persistent service session","title":"InitConsent-041, -042 : BankingProtocol.handelServiceSession"},{"location":"architecture/5-redirectPsuToConsentAPI/#preauthentication-required","text":"Some OpenBanking protocols required the PsuId to be provided with the very initial consent initiation request. In some cases, the OpenBanking protocol will specify a way to collect the PSU identity. This is the approach taken by the AuthPreStep as defined by the NextGenPSD2 protocol. In some other cases, the OpenBanking will not define any way of collecting this PSU identity. In such a case, the PsuIdentity will be collected using a UI defined by the TPP. Depending on which interface is taken to collect the PsuIdentity, we will have to mark if this collected identity is authenticated or not. If the identity collection interface allow the provision of a password and verifycation of the association between the given identity and the password, we call this an authenticated identity. If the interface only provide a collection of the PsuIdentity without proof of ownership of this identity, will call this an unauthenticated identity.","title":"PreAuthentication Required"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-060-bankingprotocolbankingprotocolresponse","text":"Inputs: (seviceSessionId, authId) If the protocol requires a PsuIdentity and does not specify an identity provider (e.g.: oAuth2) used to collect that identity, we assume the BankingProtocol is requesting the ConsentAuthorisationApi to collect the identity unauthenticated. In this case, the BankingProtocol will return an BankingProtocolResponse to instruct the BankingProtocolFacade to collect the identity of the PSU. The result carries following parameters: The seviceSessionId: contains information later used by the BankingProtocol to load the ServiceSession. The authId: references this authorization instance in the scope of a service session, as a service request can involve more that one authorization session.","title":"InitConsent-060 BankingProtocol:BankingProtocolResponse"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-061-bankingprotocolbankingprotocolresponse","text":"Inputs: (seviceSessionId, authId) The BankingProtocolFacade instructs the ConsentAuthorisationApi to collect the identity of the PSU.","title":"InitConsent-061 BankingProtocol:BankingProtocolResponse"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-062-consentauthorisationapicreatesessioncookie","text":"Inputs: (seviceSessionId, authId) Returns: SessionCookie,state The ConsentAuthorisationApi creates a SessionCookie containing information provided in the call, generates a state parameter to protect the SessionCookie and redirects the call to the psuIdScreen of the ConsentAuthorisationUI.","title":"InitConsent-062 ConsentAuthorisationApi.createSessionCookie"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-063-consentauthorisationuiredirect302","text":"Specification: redirect302[SessionCookie,ConsentAuthorisationUI.psuIdScreen() The ConsentAuthorisationApi instructs the PsuUserDevice to redirect the PSU to the psuIdScreen of the ConsentAuthorisationUI.","title":"InitConsent-063 ConsentAuthorisationUI.redirect302"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-064-consentauthorisationuidisplaypsuidscreen","text":"The ConsentAuthorisationUI displays the psuIdScreen to the PSU.","title":"InitConsent-064 ConsentAuthorisationUI:displayPsuIdScreen"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-065-consentauthorisationuienterpsuid","text":"The PSU enters the aspsp's PsuId in the filed provided by the ConsentAuthorisationUI.","title":"InitConsent-065 ConsentAuthorisationUI.enterPsuId"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-066-consentauthorisationapiupdatepsuidentification","text":"Spec: updatePsuIdentification SessionCookie, X-XSRF-TOKEN The ConsentAuthorisationUI sends the the collected data to the ConsentAuthorisationApi.","title":"InitConsent-066 ConsentAuthorisationApi.updatePsuIdentification"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-067-consentauthorisationapivalidatesessioncookie","text":"Inputs: (SessionCookie,xsrfToken) Results: seviceSessionId, authId The ConsentAuthorisationApi uses the provided xsrfToken to validate authenticity of the SessionCookie and the extract processing information out of the cookie.","title":"InitConsent-067 ConsentAuthorisationApi.validateSessionCookie"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-068-bankingprotocolfacadeupdatepsuidentification","text":"Spec: updatePsuIdentification(psu-id@tpp, psu-id@aspsp, seviceSessionId, authId) The ConsentAuthorisationApi forwards the call to the BankingProtocolFacade.","title":"InitConsent-068 BankingProtocolFacade.updatePsuIdentification"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-069-bankingprotocolfacadeselectbankingprotocol","text":"Spec: selectBankingProtocol(protocolId):BankingProtocol The BankingProtocolFacade uses the provided protocolId to select the target BankingProtocol.","title":"InitConsent-069 BankingProtocolFacade.selectBankingProtocol"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-070-bankingprotocolupdatepsuidentification","text":"Spec: updatePsuIdentification(psu-id@tpp, psu-id@aspsp, seviceSessionId ,authId) The BankingProtocolFacade forwards the call to the BankingProtocol.","title":"InitConsent-070 BankingProtocol.updatePsuIdentification"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-080-bankingprotocolbankingprotocolresponse","text":"Inputs: (seviceSessionId, authId, idpUrl) If the protocol requires a PsuIdentity and do specify an identity provider (e.g.: oAuth2) used to collect that identity, we assume the idp is going to authenticate the PSU and therefore, the BankingProtocol will return a BankingProtocolResponse to instruct the BankingProtocolFacade to send the PSU to the specified Idp. The returned result carries following parameters: The seviceSessionId : contains information later used by the BankingProtocol to laod the ServiceSession. The authId: references this authorization instance in the scope of a service session, as a service request can involve more that one authorization session. The idpUrl the url of the idp used to collect the psu identity on behalf of the ASPSP.","title":"InitConsent-080 BankingProtocol:BankingProtocolResponse"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-081-bankingprotocolfacadebankingprotocolresponse","text":"Inputs: (protocolId,seviceSessionId, serviceSessionKey,authId,idpUrl) The BankingProtocolFacade instructs the ConsentAuthorisationApi to collect the identity of the PSU.","title":"InitConsent-081 BankingProtocolFacade:BankingProtocolResponse"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-082-consentauthorisationapicreatesessioncookie","text":"Inputs: (seviceSessionId, authId, idpUrl) Returns: SessionCookie,state The ConsentAuthorisationApi creates a SessionCookie containing information provided in the call, generates a state parameter to protect the SessionCookie and redirects the call to the redirectInfoPage of the ConsentAuthorisationUI.","title":"InitConsent-082 ConsentAuthorisationApi.createSessionCookie"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-083-consentauthorisationuiredirect302","text":"Specification: redirect302[SessionCookie, ConsentAuthorisationUI.psuIdScreen() The ConsentAuthorisationApi instructs the PsuUserDevice to redirect the PSU to the redirectInfoPage of the ConsentAuthorisationUI.","title":"InitConsent-083 ConsentAuthorisationUI.redirect302"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-084-consentauthorisationuidisplayredirectinfopage","text":"The ConsentAuthorisationUI displays the redirectInfoPage to the PSU.","title":"InitConsent-084 ConsentAuthorisationUI:displayRedirectInfoPage"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-085-consentauthorisationuiconfirmredirect","text":"The PSU confirms the redirect to the idp of the ASPSP.","title":"InitConsent-085 ConsentAuthorisationUI.confirmRedirect"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-086-consentauthorisationapiconfirmredirect","text":"Spec: confirmRedirect SessionCookie, X-XSRF-TOKEN The ConsentAuthorisationUI sends a redirect confirmation to the ConsentAuthorisationApi.","title":"InitConsent-086 ConsentAuthorisationApi.confirmRedirect"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-087-consentauthorisationapivalidatesessioncookie","text":"Inputs: (SessionCookie,xsrfToken) Results: seviceSessionId, authId, idpUrl The ConsentAuthorisationApi uses the provided xsrfToken to validate authenticity of the SessionCookie and the extract processing information out of the cookie.","title":"InitConsent-087 ConsentAuthorisationApi.validateSessionCookie"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-088-consentauthorisationapicreateredirectcookie","text":"Inputs: (seviceSessionId, authId, idpUrl) Results: RedirectCookie,state The ConsentAuthorisationApi creates a RedirectCookie containing those processing information and following specification: path: ConsentAuthorisationUI.fromIdpAuth exp: expected time needed by the PSU to authenticate with the idp of the ASPSP redirect-uri: ConsentAuthorisationUI.fromIdpAuth . This the uri that is going to be used by the idp to redirect the PSU back to the TPP. state: this is the state used to verify authenticity of the RedirectCookie.","title":"InitConsent-088 ConsentAuthorisationApi.createRedirectCookie"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-089-consentauthorisationapiredirect302","text":"Spec: redirect302[RedirectCookie,\\nOnlineBankingApi.redirectEntryPoint]\\n() The ConsentAuthorisationApi instructs the ConsentAuthorisationUI to redirect the PSU to the idp of the ASPSP.","title":"InitConsent-089 ConsentAuthorisationApi:redirect302"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-091-bankingprotocolfacadefromidpauth","text":"Spec: fromIdpAuth UserAgentContext,\\nRedirectCookie \\n With this call, the idp of the APSPS redirects the PsuUserDevice to the ConsentAuthorisationUI of the TPP. This call will","title":"InitConsent-091 BankingProtocolFacade.fromIdpAuth"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-092-consentauthorisationapivalidateredirectcookie","text":"Inputs: (RedirectCookie,state) Results: seviceSessionId, authId, idpUrl The ConsentAuthorisationApi uses the provided state parameter to validate authenticity of the RedirectCookie and then extract processing information out of the cookie.","title":"InitConsent-092 ConsentAuthorisationApi.validateRedirectCookie"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-093-bankingprotocolfacadecode2token","text":"Inputs: (code, seviceSessionId, authId, idpUrl) The ConsentAuthorisationApi forwards the call to the BankingProtocolFacade.","title":"InitConsent-093 BankingProtocolFacade.code2Token"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-094-bankingprotocolfacadeselectbankingprotocol","text":"Spec: selectBankingProtocol(seviceSessionId):BankingProtocol The BankingProtocolFacade uses the provided seviceSessionId to select the target BankingProtocol.","title":"InitConsent-094 BankingProtocolFacade.selectBankingProtocol"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-095-bankingprotocolcode2token","text":"Spec: code2Token(code, seviceSessionId, authId, idpUrl) The BankingProtocolFacade forwards the call to the target BankingProtocol.","title":"InitConsent-095 BankingProtocol.code2Token"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-096-onlinebankingapicode2token","text":"Spec: GET:code2Token TppContext The BankingProtocol calls the token endpoint of the idp of the ASPSP to request the token matching the returned authorization code.","title":"InitConsent-096 OnlineBankingApi.code2Token"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-097-onlinebankingapitoken","text":"The idp of the ASPSP returns a token to the banking protocol.","title":"InitConsent-097 OnlineBankingApi:token"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-098-bankingprotocolpsuid","text":"The banking protocol extracts the needed psu-id from the returned token.","title":"InitConsent-098 BankingProtocol.psuId"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-100-aspspbankingapiinitiateconsent","text":"Spec: initiateConsent UserAgentContext, TppContext, psu-id@aspsp The BankingProtocol sends an initiate consent request to the OpenBanking interface of the ASPSP (aka AspspBankingApi).","title":"InitConsent-100 AspspBankingApi.initiateConsent"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-101-aspspbankingapi200_ok","text":"Spec: 200_OK(AisConsent, AspspRedirectInfo, AspspChallenges, seviceSessionId) The OpenBanking interface of the ASPSP returns information necessary to start the consent authorization process. AisConsent : a reference to the started ASPSP consent session AspspRedirectInfo: Information needed in case the TPP has to redirect the PSU to the OnlineBankingApi of the ASPSP AspspChallenges: Challenges and SCA meta information in case the TPP will have to collect PSU credentials at the ConsentAuthorisationApi. seviceSessionId: needed to read the serviceSession.","title":"InitConsent-101 AspspBankingApi:200_OK"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-102-bankingprotocoladdtoservicesession","text":"Spec: addToServiceSession(AisConsent,\\nAspspRedirectInfo,\\nAspspChallenges) The BankingProtocol stores the response of the call in the ServiceSession that also includes information like: protocolId, seviceSessionId, serviceSessionKey, authId.","title":"InitConsent-102 BankingProtocol.addToServiceSession"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-103-bankingprotocolservicesession","text":"The BankingProtocol also returns the ServiceSession containing information necessary to start the consent authorization process.","title":"InitConsent-103 BankingProtocol:ServiceSession"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-104-bankingprotocolfacadeservicesession","text":"The BankingProtocolFacade returns the ServiceSession containing information necessary to start the consent authorization process.","title":"InitConsent-104 BankingProtocolFacade:ServiceSession"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-105-consentauthorisationapiprepareresponse","text":"-Specs: prepareResponse(ServiceSession):xsrfToken,AuthorizeResponse,SessionCookie The ConsentAuthorisationApi prepares the response, producing: - AuthorizeResponse : that will be sent back to the ConsentAuthorisationUI and used to manage interaction with the PSU and the ConsentAuthorisationUI. - SessionCookie : that will be used to authenticate the interaction between the ConsentAuthorisationUI and the ConsentAuthorisationApi - xsrfToken : used to authenticate SessionCookie","title":"InitConsent-105 ConsentAuthorisationApi.prepareResponse"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-106-consentauthorisationuidisplaybankloginpage","text":"Spec: displayBankLoginPage SessionCookie,X-XSRF-Token If the AuthorizeResponse indicates that the consent authorization is going to happen at the interface of the TPP (ConsentAuthorisationApi), the initial screen for the processing of challenges will be displayed.","title":"InitConsent-106 ConsentAuthorisationUI.displayBankLoginPage"},{"location":"architecture/5-redirectPsuToConsentAPI/#initconsent-107-consentauthorisationuidisplayredirectinfopage","text":"Spec: displayRedirectInfoPage SessionCookie,X-XSRF-Token If the AuthorizeResponse indicates that the consent authorization process is going to happen at the interface of the ASPSP, the redirect info page will be displayed to the PSU, waiting for a confirmation to be redirected to the ASPSP online banking interface.","title":"InitConsent-107 ConsentAuthorisationUI.displayRedirectInfoPage"},{"location":"architecture/5a-psuAuthEmbeddedConsent/","text":"Authorize Consent Embedded Approach Description Implements the process of collecting consent authorization credentials in an interface provided by the TPP as described EBA-RTS embedded approach. The authorization is designed as a recursive list of ChallengeResponse sessions. Diagram Use Cases AuthEmbedded-010 : Create ConsentAuthSessionCookie If the TppConsentSession has an authChallenge, the interaction starts with the initialization of a ConsentAuthSessionCookie . The ConsentAuthSessionCookie is encrypted with a key stored in the consentSessionState . AuthEmbedded-020 : Redirect to EmbeddedAuthInitScreen After preparation of the ConsentAuthSessionCookie, the UserAgent is redirected to the EmbeddedAuthInitScreen of the ConsentAuthorisationUI. AuthEmbedded-030-040 : Load AuthChallenges The generic endpoint at ConsentAuthorisationApi.embeddedAuth allows the ConsentAuthorisationUI to load AuthChallenges if any. The call returns the AuthorizeResponse that contains all information necessary to display returned challenges to the PSU. An ScaUIMetadaData object contain UI customization parameter. AuthEmbedded-050-060 : Display Auth Screen and Collect PSU Auth Data Using information contained in the AuthorizeResponse object, the ConsentAuthorisationUI will display the suitable AuthScreen to the PSU and use it to collect PsuAuthData. AuthEmbedded-070-087 : Send PsuAuthData to ConsentAuthorisationApi The generic endpoint at ConsentAuthorisationApi.embeddedAuth will finally be called again to send authentication data entered by the PSU to the BankingProtocol. AuthEmbedded-090-094 : Redirect to FinTechApi As the TppConsentSession presents no more AuthChallenge, a RedirectSession is prepared and the PSU is redirected back to the FinTechApi.","title":"Authorize Consent Embedded Approach"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authorize-consent-embedded-approach","text":"","title":"Authorize Consent Embedded Approach"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#description","text":"Implements the process of collecting consent authorization credentials in an interface provided by the TPP as described EBA-RTS embedded approach. The authorization is designed as a recursive list of ChallengeResponse sessions.","title":"Description"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#diagram","text":"","title":"Diagram"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authembedded-010-create-consentauthsessioncookie","text":"If the TppConsentSession has an authChallenge, the interaction starts with the initialization of a ConsentAuthSessionCookie . The ConsentAuthSessionCookie is encrypted with a key stored in the consentSessionState .","title":"AuthEmbedded-010 : Create ConsentAuthSessionCookie"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authembedded-020-redirect-to-embeddedauthinitscreen","text":"After preparation of the ConsentAuthSessionCookie, the UserAgent is redirected to the EmbeddedAuthInitScreen of the ConsentAuthorisationUI.","title":"AuthEmbedded-020 : Redirect to EmbeddedAuthInitScreen"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authembedded-030-040-load-authchallenges","text":"The generic endpoint at ConsentAuthorisationApi.embeddedAuth allows the ConsentAuthorisationUI to load AuthChallenges if any. The call returns the AuthorizeResponse that contains all information necessary to display returned challenges to the PSU. An ScaUIMetadaData object contain UI customization parameter.","title":"AuthEmbedded-030-040 : Load AuthChallenges"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authembedded-050-060-display-auth-screen-and-collect-psu-auth-data","text":"Using information contained in the AuthorizeResponse object, the ConsentAuthorisationUI will display the suitable AuthScreen to the PSU and use it to collect PsuAuthData.","title":"AuthEmbedded-050-060 : Display Auth Screen and Collect PSU Auth Data"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authembedded-070-087-send-psuauthdata-to-consentauthorisationapi","text":"The generic endpoint at ConsentAuthorisationApi.embeddedAuth will finally be called again to send authentication data entered by the PSU to the BankingProtocol.","title":"AuthEmbedded-070-087 : Send PsuAuthData to ConsentAuthorisationApi"},{"location":"architecture/5a-psuAuthEmbeddedConsent/#authembedded-090-094-redirect-to-fintechapi","text":"As the TppConsentSession presents no more AuthChallenge, a RedirectSession is prepared and the PSU is redirected back to the FinTechApi.","title":"AuthEmbedded-090-094 : Redirect to FinTechApi"},{"location":"architecture/5b-psuAuthRedirectConsent/","text":"Authorize Consent Redirect Approach Description Describes the process of redirecting a PSU to the Online Banking interface of it's ASPSP. Diagram Use Cases AuthRedirect-010 & -020 : Display RedirectInfoPage ConsentAuthorisationUI.infoPanel page uses information provided by the AuthorizeResponse to display a redirect to ASPSP info page to the PSU. AuthRedirect-030 & -040 : Grant Redirect The PSU interface might decide to either allow the PSU to explicitly confirm or deny the redirection to the ASPSP, or automatically proceed with this without the consent of the PSU. In both case, the ConsentAuthorisationUI has to invoke the FinTechApi.toAspspGrant that will in turn invoke the ConsentAuthorisationApi.toAspspGrant endpoint to generate the redirect response. Managing Redirection AuthRedirect-050 : Redirecting PSU to the ASPSP Detailed specification of the redirect process might depend on the specification of the ASPSP interface. Nevertheless, the returned redirect link carries an ConsentAuthSessionCookie that is used to store consent details in the User Agent of the PSU. As well, the consentAuthState shall be part of any BackRedirectURL (OKUrl, nokUrl) so ConsentAuthorisationApi can read the ConsentAuthSessionCookie when ASPSP sends back PSU to the ConsentAuthorisationApi. AuthRedirect-060 : Back-Redirecting PSU to the ConsentAuthorisationAPI The endpoint ConsentAuthorisationAPI.fromAspspOk consumes a redirect call from the ASPSP Online Banking. The corresponding URL contains a consentAuthState. The consentAuthState will the be used to retrieve the attached ConsentAuthSessionCookie whose content will in turn be used to read the TppConsentSession. AuthRedirect-071 .. AuthRedirect-073 : Forward call to BankingProtocol The fromAspspOk method of the BankingProtocol is called with TppConsentSession and aspspAuthCode. - The aspspAuthCode can be use to retrieve Token from ASPSP Token endpoint in case of an oAuth Approach. - The consent session contains any other information needed to manage the consent process. AuthRedirect-077 Redirect PSU to FinTechAPI The TppConsentSession is temporarily encrypted and stored in the form of a RedirectSession. Corresponding redirectCode is used to redirect PSU to the FinTechAPI redirect endpoint. ConsentAuthSessionCookie is deleted with start of this back redirect process.","title":"Authorize Consent Redirect Approach"},{"location":"architecture/5b-psuAuthRedirectConsent/#authorize-consent-redirect-approach","text":"","title":"Authorize Consent Redirect Approach"},{"location":"architecture/5b-psuAuthRedirectConsent/#description","text":"Describes the process of redirecting a PSU to the Online Banking interface of it's ASPSP.","title":"Description"},{"location":"architecture/5b-psuAuthRedirectConsent/#diagram","text":"","title":"Diagram"},{"location":"architecture/5b-psuAuthRedirectConsent/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/5b-psuAuthRedirectConsent/#authredirect-010-020-display-redirectinfopage","text":"ConsentAuthorisationUI.infoPanel page uses information provided by the AuthorizeResponse to display a redirect to ASPSP info page to the PSU.","title":"AuthRedirect-010 &amp; -020 : Display RedirectInfoPage"},{"location":"architecture/5b-psuAuthRedirectConsent/#authredirect-030-040-grant-redirect","text":"The PSU interface might decide to either allow the PSU to explicitly confirm or deny the redirection to the ASPSP, or automatically proceed with this without the consent of the PSU. In both case, the ConsentAuthorisationUI has to invoke the FinTechApi.toAspspGrant that will in turn invoke the ConsentAuthorisationApi.toAspspGrant endpoint to generate the redirect response.","title":"AuthRedirect-030 &amp; -040 : Grant Redirect"},{"location":"architecture/5b-psuAuthRedirectConsent/#managing-redirection","text":"","title":"Managing Redirection"},{"location":"architecture/5b-psuAuthRedirectConsent/#authredirect-050-redirecting-psu-to-the-aspsp","text":"Detailed specification of the redirect process might depend on the specification of the ASPSP interface. Nevertheless, the returned redirect link carries an ConsentAuthSessionCookie that is used to store consent details in the User Agent of the PSU. As well, the consentAuthState shall be part of any BackRedirectURL (OKUrl, nokUrl) so ConsentAuthorisationApi can read the ConsentAuthSessionCookie when ASPSP sends back PSU to the ConsentAuthorisationApi.","title":"AuthRedirect-050 : Redirecting PSU to the ASPSP"},{"location":"architecture/5b-psuAuthRedirectConsent/#authredirect-060-back-redirecting-psu-to-the-consentauthorisationapi","text":"The endpoint ConsentAuthorisationAPI.fromAspspOk consumes a redirect call from the ASPSP Online Banking. The corresponding URL contains a consentAuthState. The consentAuthState will the be used to retrieve the attached ConsentAuthSessionCookie whose content will in turn be used to read the TppConsentSession.","title":"AuthRedirect-060 : Back-Redirecting PSU to the ConsentAuthorisationAPI"},{"location":"architecture/5b-psuAuthRedirectConsent/#authredirect-071-authredirect-073-forward-call-to-bankingprotocol","text":"The fromAspspOk method of the BankingProtocol is called with TppConsentSession and aspspAuthCode. - The aspspAuthCode can be use to retrieve Token from ASPSP Token endpoint in case of an oAuth Approach. - The consent session contains any other information needed to manage the consent process.","title":"AuthRedirect-071 .. AuthRedirect-073 : Forward call to BankingProtocol"},{"location":"architecture/5b-psuAuthRedirectConsent/#authredirect-077-redirect-psu-to-fintechapi","text":"The TppConsentSession is temporarily encrypted and stored in the form of a RedirectSession. Corresponding redirectCode is used to redirect PSU to the FinTechAPI redirect endpoint. ConsentAuthSessionCookie is deleted with start of this back redirect process.","title":"AuthRedirect-077 Redirect PSU to FinTechAPI"},{"location":"architecture/6-consume_api/","text":"Consume API after Consent Authorization Description This workflow starts with the redirect link leaving from either Authorize Consent Redirect Approach or Authorize Consent Embedded Approach . This redirect link will be used by the FinTechApi to retrieve a corresponding Token that can be used to request services on behalf of the PSU. As long as this token is valid, token will be used to perform corresponding service request on behalf on the PSU. Diagram Use Cases BankingService-010 : FinTechApi.fromConsentOk The redirect request coming from the ConsentAuthorisationApi contains a redirectCode. This request will be forwarded by the FinTechApi to the TppBankingApi. The request contains following information: redirectCode Available in the redirect url. This information will be used to retrieve the authorization token from the TppBankingApi. So the information needs not be processed by the FinTechApi FinTechConsentSessionCookie Available in the request header. This cookie shall be set for the Max time given to the PSU for the authorization of the corresponding consent. The cookie can be bound to the end point FinTechApi.fromConsentOk so it does not need to be transported to the server on other requests. finTechConsentSessionState Available in the redirect url. Will be used to read and validate the corresponding FinTechConsentSessionCookie. BankingService-020 : Validate the redirectLink The finTechConsentSessionState will be used to read and validate the corresponding FinTechConsentSessionCookie. BankingService-030 : TppBankingApi.code2Token This end point is invoked by the FinTechApi to retrieve token used to send subsequent service requests to the TppBankingApi. We call this token PsuConsentSession. BankingService-040 : BankingProtocol.code2Token Forward request to banking protocol. BankingService-050 : storePsuConsent The returned PsuConsentSession is stored by the FinTechApi for future use. BankingService-060 .. BankingService-067 Service Requests The returned token is used to invoke the service request (ListTransactions). Service result is returned to the FinTechApi and displayed to the PSU.","title":"Consume Service"},{"location":"architecture/6-consume_api/#consume-api-after-consent-authorization","text":"","title":"Consume API after Consent Authorization"},{"location":"architecture/6-consume_api/#description","text":"This workflow starts with the redirect link leaving from either Authorize Consent Redirect Approach or Authorize Consent Embedded Approach . This redirect link will be used by the FinTechApi to retrieve a corresponding Token that can be used to request services on behalf of the PSU. As long as this token is valid, token will be used to perform corresponding service request on behalf on the PSU.","title":"Description"},{"location":"architecture/6-consume_api/#diagram","text":"","title":"Diagram"},{"location":"architecture/6-consume_api/#use-cases","text":"","title":"Use Cases"},{"location":"architecture/6-consume_api/#bankingservice-010-fintechapifromconsentok","text":"The redirect request coming from the ConsentAuthorisationApi contains a redirectCode. This request will be forwarded by the FinTechApi to the TppBankingApi. The request contains following information:","title":"BankingService-010 : FinTechApi.fromConsentOk"},{"location":"architecture/6-consume_api/#redirectcode","text":"Available in the redirect url. This information will be used to retrieve the authorization token from the TppBankingApi. So the information needs not be processed by the FinTechApi","title":"redirectCode"},{"location":"architecture/6-consume_api/#fintechconsentsessioncookie","text":"Available in the request header. This cookie shall be set for the Max time given to the PSU for the authorization of the corresponding consent. The cookie can be bound to the end point FinTechApi.fromConsentOk so it does not need to be transported to the server on other requests.","title":"FinTechConsentSessionCookie"},{"location":"architecture/6-consume_api/#fintechconsentsessionstate","text":"Available in the redirect url. Will be used to read and validate the corresponding FinTechConsentSessionCookie.","title":"finTechConsentSessionState"},{"location":"architecture/6-consume_api/#bankingservice-020-validate-the-redirectlink","text":"The finTechConsentSessionState will be used to read and validate the corresponding FinTechConsentSessionCookie.","title":"BankingService-020 : Validate the redirectLink"},{"location":"architecture/6-consume_api/#bankingservice-030-tppbankingapicode2token","text":"This end point is invoked by the FinTechApi to retrieve token used to send subsequent service requests to the TppBankingApi. We call this token PsuConsentSession.","title":"BankingService-030 : TppBankingApi.code2Token"},{"location":"architecture/6-consume_api/#bankingservice-040-bankingprotocolcode2token","text":"Forward request to banking protocol.","title":"BankingService-040 : BankingProtocol.code2Token"},{"location":"architecture/6-consume_api/#bankingservice-050-storepsuconsent","text":"The returned PsuConsentSession is stored by the FinTechApi for future use.","title":"BankingService-050 : storePsuConsent"},{"location":"architecture/6-consume_api/#bankingservice-060-bankingservice-067-service-requests","text":"The returned token is used to invoke the service request (ListTransactions). Service result is returned to the FinTechApi and displayed to the PSU.","title":"BankingService-060 .. BankingService-067 Service Requests"},{"location":"architecture/dictionary/","text":"Dictionary AisConsentSpec App ASPSP AspspBankingApi BankDescriptor BankingProtocolSelector BankingProtocol BankProfile ConsentAuthorisationApi ConsentAuthorisationUI ConsentData Dictionary FinTech FinTechApi FinTechContext FinTechDC FinTechUI Information OnlineBanking2ConsentAuthRedirectInfoPage OnlineBankingApi OnlineBankingConsentSessionCookie OnlineBankingLoginSessionCookie OnlineBankingUI PSU PsuConsentSession PsuIdentifier PsuUserAgent PsuUserDevice RedirectSession SessionCookie Sharing TppBankingApi TppBankSearchApi TppConsentSession TppContext TPP UserAgentContext WebBrowser ConsentData In the context of Open Banking, a consent encompasses all information necessary to provide a third party with the authorization to access banking services on behalf of the PSU. These are: - PSU banking identifier information known as (psuId, psuCorporateId) - PSU account details information (like account numbers, iban, ...) - PSU payment orders (including beneficiary names, amounts, ...) - PSU authentication methods All these information are stored in different devices during the consent authorization session. Form of storages are among others: - Held in the browser page for display to the PSU - Stored in the Cookie for reuse by the corresponding backend - Stored in backend databases for transfer to other server components - Stored in backend databases for reuse by server components. For the purpose of protecting these data, framework is designed to always have consent data encrypted while at rest or on transit. General logic is that encrypted payload and encryption key do not reside in the same environment, unless need for decryption and processing of those data. Following object hold consent data - TppConsentSession - RedirectSession - PsuConsentSession PsuUserDevice A PSU user device runs applications used by the PSU to access banking functionality. Those applications are generally called PsuUgerAgents. PsuUserAgent Application running on a PSU device and used by the PSU to access banking functionality. We are describing the two main types of PsuUserAgents. WebBrowser A Web browser is considered compliant in the context of this framework when it can protect specific information used between the PusUserDevice and the the corresponding server application to track the user session. For session tracking, this framework uses Cookies RFC6265 . Redirection and Data Sharing We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi are hosted on different domains. This is, we are not expecting Cookies set by one application to be visible to another application (this might still happen on some local development environment, where everything runs on localhost). We also do not advice adding persistent information to RedirectUrl , as these are log files everywhere on infrastructure components in data centers. RedirectUrl shall instead carry OneTime and ShortLived authorization code we call code , that can be used to retrieved shared payload through an authenticated back channel connection. This is the practice borrowed from oAuth2 RFC6749 . Following table shows defined redirects and corresponding back chanel endpoints. Origin Application Redirecting Application Response Code; Location ; AuthCodeParam; Expiration Redirect Target Application Destination Application Data EndPoint at Origin Application TppBankingApi FinTechApi 302 ; /auth ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /loadTppConsentSession ConsentAuthorisationApi ConsentAuthorisationApi Proprietary banking API. Assume RFC6749. /auth OnlineBankingApi OnlineBankingApi none OnlineBankingApi OnlineBankingApi 302 ; [/ok|/nok] ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /token ConsentAuthorisationApi ConsentAuthorisationApi 302 ; [/ok|/nok] ; code ; 5s FinTechApi TppBankingApi /loadTppConsentSession Keeping Session Information We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi maintain their own session information. This framework uses following terms to name the session information held by an application on the UserAgent of the PSU. Application SessionCookie FinTechApi Psu2FintechLoginSession ConsentAuthorisationApi ConsentAuthSessionCookie OnlineBankingApi OnlineBankingConsentSessionCookie Session information can also be kept across redirect life cycles. Upon redirecting the UserAgent to another application, the redirecting application can set Cookies that will be resent to the domain with future requests. This way, there will be no need to maintain user session information in temporary databases on the server, thus keeping server tiny. Native App The UserAgent might be a native application running on a user mobile device or a desktop computer. In this case, redirection might still take place, but with consideration of the physical transition between source and target UI-Application. Following specifications deal with security threads associated with the redirection between UI-Application on a user device: RFC8252:OAuth 2.0 for Native Apps , RFC7636:Proof Key for Code Exchange by OAuth Public Clients For the purpose of kepping the overall architecture of this framework simple, we will require native applications to provide the same behavior as the WebBrowser described above. UserAgentContext Independent on the type of PsuUgerAgent, OpenBanking interfaces will require transmission of a class of information associated with the PsuUserAgent so they can perform verification of the authenticity of the original PSU request and customize the response produced for intermediary layers. We group these data under the name \"UserAgentContext\". Following header names account among the UserAgentContext: IP-Address, IP-Port, Accept, Accept-Charset, Accept-Encoding, Accept-Language, Device-ID, User-Agent, Geo-Location, Http-Method. FinTechUI UI Application running on the PsuUserAgent and used by the PSU to access the FinTechApi ConsentAuthorisationUI UI used by PSU to authoraise consent in embedded case. OnlineBankingUI This UI manages the interaction between the PSU and the ASPSP in redirect cases. FinTech Organisation that uses Online Banking Services provided by TPP to service PSU with additional services. FinTech may or may not have own TPP License. FinTechDC Data center environment of the FinTech. Host the FinTechApi. FinTechApi Financial web service provided by the FinTech. Tpp Data Center Data center environment of the TPP TppBankingApi Tpp backend providing access to ASPSP banking functionality. This interface is not directly accessed by the PSU but by the FinTechApi. FinTechApi will use a FinTechContext to authenticate with the TppBankingApi. TppBankSearchApi Repository of banks maintained in the TPP's banking gateway. The banking search API will later presen an interface to configure profiles attached to listed banks. BankDescriptor Descriptive information assocaited with a bank like: - The name of the Bank - The address of the bank - The bank identification code BankProfile BankingApi profile information associated with a bank like: - The BankingProtocol used to connect with the bank - List of Banking services provided by the BankingApi of the bank - SCA approcahes associated with the BankingApi - ScaUIMetadaData: Screens and field used to collect user authentication data. - Actions to be performed by the PSU prior to using the BankingProtocol AisConsentSpec Specification associated with an AisConsent. This is highly dependent on the BankProfile. Following information might be carried by an AisConsentSpec object: - recurringIndicator - validUntil - frequencyPerDay - combinedService - accountAccessTemplate - availableAccounts[availableAccountsWithBalances, allAccounts] - allPsd2[allAccounts] FinTechContext Information used to identify the FinTech application at the TppBankingApi. For example a FinTech SSL client certificate or an APIKey or an oAuth2 Password Grant Credential. PSU A Payment Services User is a natural or legal person making use of a payment service as a payee, payer or both. PsuConsentSession Information associated with the consent as exchanged between the FinTechApi and the TppBankingApi. Generally contains: - Data needed to customize psu access at the ConsentAuthorisationApi (showInfoPanel, fintechStateHash) - Data needed to manage redirection of PSU from the TppConsentSession to the FintechUI like (FinTech-Redirect-URI, FinTech-Nok-Redirect-URI, FinTech-Explicit-Authorisation-Preferred, FinTech-Content-Negotiation) Object also contains information associated with the PSU requesting service if available. - The identifier of the PSU in the realm of the Tpp PsuIdentifier - Existing Consent References if any. PsuIdentifier This is the identifier of the PSU in the FinTech2Tpp relationship. This identifier can be saved once a consent has been successfully established to allow for reuse of existing consent in future sessions. ConsentAuthorisationApi Interface used by the PSU to authorize a consent. SessionCookie and XSRF We assume all three applications FinTeApi, ConsentAuthorisationApi, OnlineBakingApi maintain their own session information with corresponding UIs. We assume those APIs use cookies to maintain session with the corresponding user agents. In the context of this framework, those cookies are called SessionCookies. We also expect a following behavior from APIs and UserAgents: A response that sets a SessionCookie also carries a corresponding X-XSRF-TOKEN in the response header. A request that authenticates with a session cookie must also add the X-XSRF-TOKEN to the request header. RedirectSession Holds consent information for the duration of a redirect. Redirect patterns are described below . BankingProtocol Component managing access to a banking interface initiative. WE will have to deal with many protocols like NextGenPSD2, HBCI, OpenBanking UK, PolishAPI. BankingProtocolSelector Help select a banking protocol. Aspsp Data Center Data center environment of the ASPSP ASPSP Account Servicing Payment Service Providers provide and maintain a payment account for a payer as defined by the PSRs and, in the context of the Open Banking Ecosystem are entities that publish Read/Write APIs to permit, with customer consent, payments initiated by third party providers and/or make their customers\u2019 account transaction data available to third party providers via their API end points. AspspBankingApi Api banking provided by ASPSP. This interface is not directly accessed by the PSU but by the TppBankingApi. TppBankingApi will use a TppContext to authenticate with the TppBankingApi. TppContext Information used to identify the Tpp application in the ASPSP environment. Like a TPP QWAC certificate. TppConsentSession Storage for consent data in the realm of the BankingProtocol. The banking protocol is both accessible to the TppBankingApi and the ConsentAuthorizationApi. The cryptographic key needed to recover the TppConsentSession is always delivered by the calling layer. These are: - FinTechUI -> FinTechApi -> TppBankingApi -> BankingProtocol : in this case the key needed to recover the TppConsentSession in contained in the PsuConsentSession. Generally that key will transitively originate from an interaction with the user agent. - CosentAuthorizationUI -> CosentAuthorizationApi -> BankingProtocol : in this case the key needed to recover the TppConsentSession originate from the ConsentAuthSessionCookie. Beside consent data, additional data might be held in the TppConsentSession: - FinTechContext : Data needed to authorize the FinTechApi (FinTechSSLCertificate, ApiKey, SignedJWT) - Additional information needed for interaction between TPP and ASPSP but without any concern to the PSU. OnlineBankingApi Generally the online banking application on an ASPSP. In redirect cases, the ASPSP OnlineBankingApi establishes a direct session with the PSU to allow the PSU to identify himself, review and authorize the consent. OnlineBankingConsentSessionCookie This is a Cookie used to maintain the session between the OnlineBankingUI and the OnlineBankingApi. As a recommendation, the validity of this Cookie shall be limited to the life span of the consent session. As the OnlineBankingApi redirects the PSU back to the ConsentAuthorisationApi up on completion of the consent session. Redirection happens independently on whether the consent was authorized or not. OnlineBanking2ConsentAuthRedirectInfoPage It is recommended to inform the PSU prior to redirecting the PSU back to the TPP. This UI-Panel will be called OnlineBanking2ConsentAuthRedirectInfoPage. If the ASPSP is using a trusted environment (Native App) and wants to keep the relationship to the PSU alive, it is necessary to store this relationship in a separated OnlineBankingLoginSessionCookie. OnlineBankingLoginSessionCookie This Cookie will be used by the ASPSP to keep a login session of the PSU over the life span of consent session. This will prevent the PSU from performing the login step for upcoming consent sessions. TPP A TPP is a Third Party Provider - a legal entity that holds a TPP License provided by NCA (PISP, AISP etc). and operates with corresponding QWAC Certificate. TPP may serve FinTech companies with XS2A Services.","title":"Dictionary"},{"location":"architecture/dictionary/#dictionary","text":"AisConsentSpec App ASPSP AspspBankingApi BankDescriptor BankingProtocolSelector BankingProtocol BankProfile ConsentAuthorisationApi ConsentAuthorisationUI ConsentData Dictionary FinTech FinTechApi FinTechContext FinTechDC FinTechUI Information OnlineBanking2ConsentAuthRedirectInfoPage OnlineBankingApi OnlineBankingConsentSessionCookie OnlineBankingLoginSessionCookie OnlineBankingUI PSU PsuConsentSession PsuIdentifier PsuUserAgent PsuUserDevice RedirectSession SessionCookie Sharing TppBankingApi TppBankSearchApi TppConsentSession TppContext TPP UserAgentContext WebBrowser","title":"Dictionary"},{"location":"architecture/dictionary/#redirection-and-data-sharing","text":"We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi are hosted on different domains. This is, we are not expecting Cookies set by one application to be visible to another application (this might still happen on some local development environment, where everything runs on localhost). We also do not advice adding persistent information to RedirectUrl , as these are log files everywhere on infrastructure components in data centers. RedirectUrl shall instead carry OneTime and ShortLived authorization code we call code , that can be used to retrieved shared payload through an authenticated back channel connection. This is the practice borrowed from oAuth2 RFC6749 . Following table shows defined redirects and corresponding back chanel endpoints. Origin Application Redirecting Application Response Code; Location ; AuthCodeParam; Expiration Redirect Target Application Destination Application Data EndPoint at Origin Application TppBankingApi FinTechApi 302 ; /auth ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /loadTppConsentSession ConsentAuthorisationApi ConsentAuthorisationApi Proprietary banking API. Assume RFC6749. /auth OnlineBankingApi OnlineBankingApi none OnlineBankingApi OnlineBankingApi 302 ; [/ok|/nok] ; code ; 5s ConsentAuthorisationApi ConsentAuthorisationApi /token ConsentAuthorisationApi ConsentAuthorisationApi 302 ; [/ok|/nok] ; code ; 5s FinTechApi TppBankingApi /loadTppConsentSession","title":"Redirection and Data Sharing"},{"location":"architecture/dictionary/#keeping-session-information","text":"We assume all three applications FinTechApi, ConsentAuthorisationApi, OnlineBankingApi maintain their own session information. This framework uses following terms to name the session information held by an application on the UserAgent of the PSU. Application SessionCookie FinTechApi Psu2FintechLoginSession ConsentAuthorisationApi ConsentAuthSessionCookie OnlineBankingApi OnlineBankingConsentSessionCookie Session information can also be kept across redirect life cycles. Upon redirecting the UserAgent to another application, the redirecting application can set Cookies that will be resent to the domain with future requests. This way, there will be no need to maintain user session information in temporary databases on the server, thus keeping server tiny.","title":"Keeping Session Information"},{"location":"architecture/dictionary/#redirectsession","text":"Holds consent information for the duration of a redirect. Redirect patterns are described below .","title":" RedirectSession"},{"location":"architecture/use_cases/","text":"Use Cases Login with FinTech Application Search Bank Select Bank List of Accounts List of Transactions Redirect to Consent Authorization API Authorize Consent Redirect Approach Authorize Consent Embedded Approach Consume Service","title":"Use cases"},{"location":"architecture/use_cases/#use-cases","text":"Login with FinTech Application Search Bank Select Bank List of Accounts List of Transactions Redirect to Consent Authorization API Authorize Consent Redirect Approach Authorize Consent Embedded Approach Consume Service","title":"Use Cases"},{"location":"architecture/building_blocks/01.Application_context/","text":"Application Context Diagram Description This diagram describes the parties that are involved into services related to Open Banking Gateway. Detailed descrition of Use Cases can be found in the corresponding documentation . End User End customer that uses services of FinTech. He owns one or several bank accounts. Access to these accounts is used by FinTech to provide services. See also PSU FinTech Service An organisation (normally non-banking or neo-banking company) that acts on financial market to serve End customers with modern financial services. See also FinTech Open Banking Gateway Technical product that allows FinTech to access XS2A Services in order to fulfill demands of End-Customers. Authorises access to Bank account through direct communication with End User. It is operated by legal entity that owns TPP License or uses TPP License of FinTech. See also TPP Bank A credit or e-money institution that provides payment services and account management services. It provides XS2A Services according to PSD2 and other Open Banking initiatives. See also ASPSP","title":"Application context"},{"location":"architecture/building_blocks/01.Application_context/#application-context","text":"","title":"Application Context"},{"location":"architecture/building_blocks/01.Application_context/#diagram","text":"","title":"Diagram"},{"location":"architecture/building_blocks/01.Application_context/#description","text":"This diagram describes the parties that are involved into services related to Open Banking Gateway. Detailed descrition of Use Cases can be found in the corresponding documentation .","title":"Description"},{"location":"architecture/building_blocks/01.Application_context/#end-user","text":"End customer that uses services of FinTech. He owns one or several bank accounts. Access to these accounts is used by FinTech to provide services. See also PSU","title":"End User"},{"location":"architecture/building_blocks/01.Application_context/#fintech-service","text":"An organisation (normally non-banking or neo-banking company) that acts on financial market to serve End customers with modern financial services. See also FinTech","title":"FinTech Service"},{"location":"architecture/building_blocks/01.Application_context/#open-banking-gateway","text":"Technical product that allows FinTech to access XS2A Services in order to fulfill demands of End-Customers. Authorises access to Bank account through direct communication with End User. It is operated by legal entity that owns TPP License or uses TPP License of FinTech. See also TPP","title":"Open Banking Gateway"},{"location":"architecture/building_blocks/01.Application_context/#bank","text":"A credit or e-money institution that provides payment services and account management services. It provides XS2A Services according to PSD2 and other Open Banking initiatives. See also ASPSP","title":"Bank"},{"location":"architecture/building_blocks/02.Component_diagrams/","text":"Component diagrams Whitebox overall system Description Whitebox BankingProtocol Description","title":"Component diagrams"},{"location":"architecture/building_blocks/02.Component_diagrams/#component-diagrams","text":"","title":"Component diagrams"},{"location":"architecture/building_blocks/02.Component_diagrams/#whitebox-overall-system","text":"","title":"Whitebox overall system"},{"location":"architecture/building_blocks/02.Component_diagrams/#description","text":"","title":"Description"},{"location":"architecture/building_blocks/02.Component_diagrams/#whitebox-bankingprotocol","text":"","title":"Whitebox BankingProtocol"},{"location":"architecture/building_blocks/02.Component_diagrams/#description_1","text":"","title":"Description"},{"location":"architecture/concepts/psu-security-concept/","text":"PSU Access Security Design Abstract We define the OpenBanking PSU Contract as a relationship between the PSU , the FinTech , the TPP and the ASPSP so that: - the PSU can initiate banking/payment services through an application provided by the FinTech , and for this purpose, - the PSU can authorize the TPP to service this initiated payment/banking requests from a designated FinTech on behalf of the PSU, and for this purpose, - the PSU can authorize the ASPSP to service this initiated payment/banking requests from a designated TPP on behalf of the PSU. This is, the PSU might be interacting with up to three different legal entities to consume a single banking/payment service (FinTech, TPP and ASPSP). Therefore, the entire OpenBanking service flow involves the initiation, authorization and confirmation of the banking/payment service. The integrity of the entire service flow is only given if we can verify that: - the PSU that controls the credentials used to identify at the FinTech interface and initiate a banking/payment service at that FinTech interface is the same natural person as the PSU that controls the credential used to identify at the TPP interface for the purpose of authorizing that initiated banking service , and that - the PSU that controls the credentials used to identify at the TPP interface for the purpose of authorizing an initiated banking service is the same natural person as the PSU that controls the credentials used to identify at the ASPSP interface with the purpose of authorizing that initiated banking service at the ASPSP interface, and that - the PSU that controls the credentials used to identify at the ASPSP interface and authorize an initiated banking service is the same natural person as the PSU that finally identifies at the FinTech interface to confirm that authorized banking/payment service. We call this relation the PSU identities equivalence . This is, ensuring integrity of the overall PSU OpenBanking service flow boils down to the verification of the equivalence of involved PSU identities (psu-id@fintech ==> psu-id@tpp ==> psu-id@aspsp). Therefore, the purpose of this work is to analyze interactions to be performed between a PSU and those three legal entities while initiating, authorizing and confirming a banking/payment service, and then provide recommendations on how to secure those interactions such as to maintain the integrity of the banking service consumed. The following picture depicts participants and interfaces used in this concept. Core Participants PSU A Payment Service User is any natural person that uses a banking or payment service on behalf of himself or on behalf of another natural person or legal entity. Form the perspective of this analysis, a PSU: - is a natural person, - is in possession of some personal non sharable online banking credentials, - uses applications running on some devices to interact with online services, - can act on behalf of himself, another natural or legal person, ASPSP An Account Servicing Payment Service Provider is a legal entity maintains payment account for natural and/or legal person. Form the perspective of this analysis, an ASPSP: - might provides an online interface for use by a PSU to authorize of a consent (OnlineBankingApi), - might provide an application for use by the PSU for use by the PSU to access the OnlineBankingApi (OnlineBankingUI), - provides an online interface for use by a TPP for online access to banking services (OpenBankingApi), - might provide an online interface for use by a TPP to forward PSU consent authorization to the ASPSP (OpenBankingApi) The psu-id@aspsp is the identity of the PSU as known to the ASPSP. This identity generally matches an online banking identifier in the realm of the ASPSP. TPP A Third Party Provider is a legal entity that implements access to ASPSP OpenBanking interfaces. A TPP is a regulated entity that implements legal provisions to protect PSU banking data obtained from OpenBankingApis. Market practices show that some TPPs are setup to service other entities (FinTech) with access to banking services. Form the perspective of this analysis, a TPP: - provides an online interface for the management of PSU consents (ConsentAuthorisationApi) - provides an application for use by the PSU to authorize consent in the embedded approach (EmbeddedConsentUI). This same application can also be used to present redirect info pages to the PSU (RedirectInfoPage). - provides an online interface for use by a FinTech to access banking services (TppBankApi, TppBankSearchApi), The psu-id@tpp is the PSU as known to the TPP. If TPP environment is designed to service a single FinTech, this identity can be set equal to the psu-id@tpp . If a TPPenvironment services multiple FinTech entities, the TPP will have to establish a separated PSU identity that references all corresponding FinTech identities. This requirement only exists because some OpenBanking specifications do not allow TPP to maintain multiple valid consents of the same type on the same bank account. In a situation where the TPP uses the same account information consent to service many FinTech, a TPP consent management layer must allow a PSU to revoke that consent for a designated FinTech without revoking the consent at the ASPSP level. FinTech A FinTech is a legal entity that provides some sort of aggregated online banking/payment services to other natural and legal people. Form the perspective of this analysis, a FinTech: - provides an online interface for use by a PSU to access banking services (FinTechApi), - provides an application for use by the PSU to consume banking services (FinTechUI, FinTechSearchUI). The psu-id@fintech is the identity of the PSU in the realm of the FinTech, as most FinTech applications require the PSU to establish an identity before using the application. This is the most important identity as it covers the consumption of the banking/payment services. Further identities (tpp, aspsp) are only needed for authorization. This framework is designed such as to request the FinTech to provide a permanent unique identity of each PSU to the TPP. PsuUserDevice A PsuUserDevice runs applications used by the PSU to access banking services. Those applications are generally called PsuUserAgents. Sample PSU user devices are Personal Computers, Mobile Phones or even SecureId Token devices. PsuUserAgent A PsuUserAgent is an application running on a PsuUserDevice and used by the PSU to access banking functionality. PsuUserAgents are either web applications running on a standard web browser or native applications. A web browser is considered compliant with this framework when : - it can protect access to cookies. - it can manage redirection as defined by the http specification. For uniformity, we require native applications considered compliant with this framework to provide the same behavior as a compliant web browser based PsuUgerAgent with respect to cookie management and redirection. Following specifications deal with security threads associated with the redirection between UI-Applications on a PsuUserDevice: RFC8252:OAuth 2.0 for Native Apps , RFC7636:Proof Key for Code Exchange by OAuth Public Clients . UserAgentContext Independent on the type of PsuUgerAgent, OpenBanking interfaces will require transmission of a class of information associated with the PsuUserAgent so they can perform verification of the authenticity of the original PSU request and customize the response produced for intermediary layers. We group these data under the name \"UserAgentContext\". Following header names account among the UserAgentContext: IP-Address, IP-Port, Accept, Accept-Charset, Accept-Encoding, Accept-Language, Device-ID, User-Agent, Geo-Location, Http-Method. Security Considerations This work deals with details associated with the verification that the natural person that controls credentials used to authorize the initiation of a banking service at the TPP or ASPSP interface also controls credentials used to initiated that service at the FinTech interface. This is, we want to prevent the owner of some online banking credentials to involuntarily use them to authorize a banking service initiated by another natural person. Cookies The first measure consists in protecting a session established between a PsuUgerAgent and a ServerApplication (FinTechApi, ConsentAuthorizeApi). The use of Cookies RFC6265 provides the most elaborated way to protect a session established between a PsuUgerAgent and a ServerApplication. We assume a PsuUgerAgent storing a cookie fulfills following requirements: - Cookies carrying the attribute HttpOnly are not provided access to scripts run by a web browser based UserAgent. Native applications designed for banking services must undergo thorough security reviews to make sure they fulfill this requirement. - Cookies carrying the attribute Secure are only sent to the server over SSL connections. - Expired Cookies (attribute Expires, Max-Age ) are not sent to the server. - Cookies set with no value ( SessionCookie=; ) are deleted from the UserAgent. - Cookies shall never be transmitted to a domain not matching it origin. - In the same domain, cookies shall only be transmitted to the configured path. SessionCookie and XSRF We assume all three applications FinTeApi, ConsentAuthorisationApi, OnlineBakingApi maintain their own session information with corresponding UIs. We assume those APIs use cookies to maintain session with the corresponding PsuUserAgents. In the context of this framework, those cookies are called SessionCookies. We also expect a following behavior from APIs and UserAgents: * A response that sets a SessionCookie also carries a corresponding X-XSRF-TOKEN in the response header. * A request that authenticates with a SessionCookie must also add the X-XSRF-TOKEN to the request header. * Server must match X-XSRF-TOKEN against SessionCookie before proceeding with the request. Redirection The server can request the PsuUgerAgent to redirect the user to another application by returning an \"HTTP 302\" response code to the PsuUserAgent. The way a PsuUserAgent proceeds with a location URL depend on the nature and the configuration of the host PsuUserDevice. The handling of redirection in native applications environments is well handled in OAuth 2.0 for Native Apps RFC8252 . We will be using redirection to switch the user context from one application to another one. Following redirection will generally be found in this framework: - FinTechApi to-> ConsentAuthorisationApi - ConsentAuthorisationApi to-> OnlineBankingApi - OnlineBankingApi backTo-> ConsentAuthorisationApi - ConsentAuthorisationApi backTo-> FinTechApi We assume all three ServerApplications (FinTechApi, ConsentAuthorisationApi, OnlineBankingApi) are hosted on different domains. This is, we do not expect cookies set by one ServerApplication to be visible to another ServerApplication. We assume UiApps (OnlineBankingUI, EmbeddedConsentUI, FinTechUI/FinTechSearchUI) do not share context information. They can only interact with each other by the way of the hosting PsuUserDevice using the URL provided by the source UiApp to open the target UIApp. Redirection and XSRF As we can not protect/control redirection on user device, known internet based identity protocols like oAuth2 make use of the state parameter to store information that will be sent back to the redirection source and used by the redirection source to verify that the user was sent back to the original source UIApp. This is, implementing XSRF for redirection consists in storing a RedirectCookie in the source UIApp and adding a corresponding XSRF-Token to the state parameter. Redirection and Data Sharing We also do not advice adding too many persistent information to the redirection URL, as these are all logged in files everywhere on infrastructure components in data centers. If we have any bulky information to share between the source UIApp and the target UIApp, we can add a OneTime and ShortLived authorization code we called redirectCode to RedirectUrl . This redirectCode can be used at target to retrieved shared payload (generally through an authenticated back channel connection). This is the practice borrowed from oAuth2 RFC6749 . Identity Equivalence When a PSU initiate a banking service at the FinTech interface (FinTechApi), the processing TPP will initiate a consent authorization process if needed (TppBankingApi). Once a consent authorization process is initiated by the TppBankingApi, we want to make sure that the PSU giving his consent (psu-id@tpp, psu-id@aspsp), is the same as the PSU requesting the service at the FinTech interface (psu-id@fintech). Ensuring the equivalence of those identities can be represented as (assuming alice and bob are PSUs): alice@fintech ==> alice@tpp ==> alice@aspsp // Where alice@fintech ==> alice@tpp neans the person identified at the FinTechApi as alice@fintech controls the necessary credentials used to identify at the ConsentAuthorisationApi as alice@tpp This is, the integrity of the OpenBanking PSU Contract is broken when security breaches can be used to compromise these equivalences like in the following pseudo code: bob@fintech ==> alice@tpp ==> alice@aspsp // although in reality bob@fintech =/=> alice@tpp // In this case bob identifies with the FinTechApi (as bob@fintech) but manipulates alice to identify with the ConsentAuthorisationApi and provide her consent for the requested banking service. bob@fintech ==> bob@tpp ==> alice@aspsp // although in reality bob@tpp =/=> alice@aspsp // In this case bob identifies with the FinTechApi and the ConsentAuthorisationApi but manipulates alice to identify with the OnlieBankingApi and provide her consent for the requested banking service. Step-1: Identify PSU at the FinTechApi We always expect the PSU to be identified at the FinTechApi interface. So we assume that the psu-id@fintech is known. The integrity of the rest of the contract relies on the capability of the FinTech to protect the session associating the PSU to the FinTechApi. The service request itself is always initiated by the FinTechApi. Before initiation, we assume that the PSU (alice) has signed into the FinTechApi and her identity is known to the FinTechApi and thus associated with the service request forwarded to the TppBankingApi. Step-2: Store psu-id@fintech with the ConsentAuthorizationSession While processing a service request, if the TPP notices that the service request is not covered by a consent (either as a result of pre-checking for the consent or from an error returned by the ASPSP's OpenBankingApi), the TPP will trigger a new consent authorization process identifies by an auth-id and called ConsentAuthorizationSession . Starting a new ConsentAuthorizationSession, we require the TPP to store the FinTech identity of the service requesting PSU alice@fintech with the ConsentAuthorizationSession record before initiating a redirect to the ConsentAuthorisationApi. This is, the ConsentAuthorizationSession record stored in the TPP Database has the state: // Syntax: [index+]=ConsentAuthorizationSession[data] [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, ConsentData] // Where redirectCode is a one time key that can be used by the ConsentAuthorisationApi once to retrieve the ConsentAuthorizationSession. // Where auth-id is the identifier of this ConsentAuthorizationSession Step-2: Identify PSU at the TPP ConsentAuthorisationApi At first, redirecting a PSU from the FinTechApi to the TPP ConsentAuthorisationApi does not establish any relationship between the PSU and the TPP, even if we can use the redirectCode associated with the redirected URL to retrieve ConsentAuthorisationSession. Of course the ConsentAuthorisationApi knows that the ConsentAuthorizationSession was initiated by alice@fintech, but this does not mean that the PSU controlling the current PsuUserAgent (known as ConsentAuthorisationUI) is the same natural person as the one controling the identity alice@fintech. In order to proceed with the ConsentAuthorisationSession, the TPP ConsentAuthorisationApi will have to establish an identification of the natural person controlling the UserAgent, resulting in a new PSU identity called (psu-id@tpp). This PSU identity (psu-id@tpp) is associated with the ConsentAuthorisationSession upon successful authentication of the PSU at the TPP ConsentAuthorisationApi interface. At this stage, the ConsentAuthorizationSession record stored in the TPP Database has the following state: [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, alice123@tpp, ConsentData] // But with the assumption that alice@fintech =/=> alice123@tpp. // Meaning that both identities are not yet verified equivalent (controlled by the same natural person) Even though the ConsentAuthorizationSession in the TPP database is associated with two identities (alice@fintech and alice123@tpp), there is no proof that both identities alice@fintech and alice123@tpp are controlled by the same natural person. Step-3a: ConsentAuthorisation at the TPP's ConsentAuthorisationApi (Embedded-sca) In an Embedded-SCA case, the credentials associated with psu-id@aspsp are collected by the ConsentAuthorisationApi and forwarded to the OpenBankingApi of the ASPSP. In this case it is easy to assume uniqueness between both psu-id@tpp and psu-id@aspsp as both are done within the same user session at the same interface. This results in the following record after a successful embedded consent authorization at the ConsentAuthorisationApi: [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, alice123@tpp, alice-s@aspsp, ConsentData, alice123@tpp==>alice-s@aspsp] // Where alice@fintech =/=> alice123@tpp. // Meaning that both identities are not yet verified equivalent (owned by the same natural person) // Where alice123@tpp ==> alice-s@aspsp. // Meaning alice123@tpp could provide the banking credentials of alice-s@aspsp. Even in this embedded case, there is still a missing equivalence between alice@fintech and alice-s@tpp . Step-3b: Identify PSU at the ASPSP's OnlineBankingApi (Redirect-sca) In a Redirect-SCA case (oauth, redirect, decoupled), the PSU has to be redirected by the ConsentAuthorisationApi to the OnlienBanking interface of the ASPSP. After a successful consent authorization at the OnlienBanking interface, the record could be updated by the mean of poling the authorization status of this ConsentAuthorizationSession at the OpenBankingApi of the ASPSP. Upon successful authorization of the requested consent, the ConsentAuthorizationSession in the database of the TPP looks like: [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, alice123@tpp, alice-s@aspsp, ConsentData] // Where alice@fintech =/=> alice123@tpp. // Meaning that both identities are not yet verified equivalent (owned by the same natural person) // Where alice123@tpp =/=> alice-s@aspsp. // Meaning that both identities are not yet verified equivalent (owned by the same natural person) Step-4: Verify Equivalence between psu-id@aspsp and psu-id@tpp (Redirect-sca) After a successful consent authorization at the OnlineBankingApi of the ASPSP, the framework has to ensure equivalence between the PSU identified at the TPP and the PSU identified at the ASPSP. In this framework, we designed a two steps redirection FinTech -> TPP -> ASPSP knowing that this might make the process more cumbersome, but this design represents the superset of most of the cases found on the market. After thorough analysis of most scenarios, we noticed that the identity equivalence process can only securely happen in one of these ways: Alt-1: Sharing of Identity Provider If two involved entities (FinTech, TPP, ASPSP) share the same identity provider (IDP), the identity association process will be simple as the IDP will provide a common identifier. For example the subject claim of an identity token could lead to the verification of subject(alice123@tpp)==subject(alice-s@aspsp). Alt-2: No Sharing of Identity Provider If two parties are not sharing identity provider, a physical back redirection from the ASPSP to the TPP must be used to help complete the identity verification. Note that a physical back redirection will not be possible with the decoupled approach. Following sub-steps will be needed to ensure clean and secure physical back redirection in the example of a redirect from the TPP to the ASPSP: Make sure the physical back redirection sends the PSU to the Source PsuUserAgent The URL for the physical back redirection must have been protected against manipulation: - In case there is an initiation step present between TPP and ASPSP, use this step must have been used to transfer the back redirection url to the ASPSP (this is an example of the redirect approach of the NextGenPSD2 API). - In case there is no such initiation step (generally when OAuth is being used), make sure oAuth2 back redirection url templates and webOrigins are properly designed, as the concrete back redirection url is transported in the redirect_uri parameter of the consent request and exposed to attackers for manipulations. Verify Redirect State once in the Source PsuUserAgent A RedirectCookie must have been set on the PsuUserAgent while redirecting a user from the TPP (ConsentAuthorisationApi) to the ASPSP (OnlineBankingApi). The back redirection url to contains contains the state parameter that is used by the source PsuUserAgent to validate stored RedirectCookie. If a physical redirect can occur from the ASPSP (OnlineBankingApi) back to the TPP (ConsentAuthorisationApi), a validation of the original RedirectCookie can be taken as a guaranty to declare equivalence between the psu-id@tpp and the psu-id@aspsp . Alt-3: No Sharing of IDP and Decoupled-sca We define a decoupled approach as one where there no way of achieving physical (back) redirection between the source UIApp and the target UiApp. This generally happens when both are not on the same physical device. In this case a physical exchange muss happen. This physical information exchange is generally sufficient in one direction as the purpose is to make sure the PSU is physically in control of both devices (and UIApp credentials). Following are among other means for physical information exchange between two devices: Manual Code Transfer Physical sharing of state information between the source an the target of the redirection can be covered by having one side of the redirect enter a redirectCode displayed by the other side. In this case the redirectCode displayed is the handle for a more complex hash code shared over the back channel between source and target of the redirect. QR-Scan Physical sharing of state information between the source an the target of the redirection can be covered by having one side of the redirect (camera capable side) the possibility to scan a QR-Code displayed by the other side UIApp. Push notifications A push notification could be used to deep link the user into the target decoupled UIApp. To prevent spam, push notification shall only be done if the overall process can provide a sufficient level of confidence that the source side of the redirection identified the PSU before the initiation of the redirection process. The use of push notification can replaces the manual code or QR-scan described above. Limitation of Identity Equivalence for Existing OpenBanking Flows In some OpenBanking approaches, validating the consent at the OnlineBanking interface of the ASPSP directly finalizes authorization of the service request. The current state of the NextGenPSD2 specification for example finalizes a payment initiation with the act of a PSU authorizing the payment consent (either on the ASPSP or TPP interface), but future release are planing an additional step for the confirmation of the service request at the OpenBanking interface (after authorization). This additional step is necessary for to complete verification of the identity equivalence as described above. Recall that this weakness is only provided if the consent authorizing interface (OnlineBankingApi for redirect-sca or ConsentAuthorizationApi for embedded-sca) can not establish identity equivalence. Remember that if source and target share the same identity provider, target will generally be able establish identity equivalence and therefore authorized payment initiation can be release for execution without breach of the OpenBanking PSU Contract .","title":"PSU Security Concept"},{"location":"architecture/concepts/psu-security-concept/#psu-access-security-design","text":"","title":"PSU Access Security Design"},{"location":"architecture/concepts/psu-security-concept/#core-participants","text":"","title":"Core Participants"},{"location":"architecture/concepts/psu-security-concept/#security-considerations","text":"This work deals with details associated with the verification that the natural person that controls credentials used to authorize the initiation of a banking service at the TPP or ASPSP interface also controls credentials used to initiated that service at the FinTech interface. This is, we want to prevent the owner of some online banking credentials to involuntarily use them to authorize a banking service initiated by another natural person.","title":"Security Considerations"},{"location":"architecture/concepts/psu-security-concept/#redirection-and-xsrf","text":"As we can not protect/control redirection on user device, known internet based identity protocols like oAuth2 make use of the state parameter to store information that will be sent back to the redirection source and used by the redirection source to verify that the user was sent back to the original source UIApp. This is, implementing XSRF for redirection consists in storing a RedirectCookie in the source UIApp and adding a corresponding XSRF-Token to the state parameter.","title":"Redirection and XSRF"},{"location":"architecture/concepts/psu-security-concept/#redirection-and-data-sharing","text":"We also do not advice adding too many persistent information to the redirection URL, as these are all logged in files everywhere on infrastructure components in data centers. If we have any bulky information to share between the source UIApp and the target UIApp, we can add a OneTime and ShortLived authorization code we called redirectCode to RedirectUrl . This redirectCode can be used at target to retrieved shared payload (generally through an authenticated back channel connection). This is the practice borrowed from oAuth2 RFC6749 .","title":"Redirection and Data Sharing"},{"location":"architecture/concepts/psu-security-concept/#step-1-identify-psu-at-the-fintechapi","text":"We always expect the PSU to be identified at the FinTechApi interface. So we assume that the psu-id@fintech is known. The integrity of the rest of the contract relies on the capability of the FinTech to protect the session associating the PSU to the FinTechApi. The service request itself is always initiated by the FinTechApi. Before initiation, we assume that the PSU (alice) has signed into the FinTechApi and her identity is known to the FinTechApi and thus associated with the service request forwarded to the TppBankingApi.","title":"Step-1: Identify PSU at the FinTechApi"},{"location":"architecture/concepts/psu-security-concept/#step-2-store-psu-idfintech-with-the-consentauthorizationsession","text":"While processing a service request, if the TPP notices that the service request is not covered by a consent (either as a result of pre-checking for the consent or from an error returned by the ASPSP's OpenBankingApi), the TPP will trigger a new consent authorization process identifies by an auth-id and called ConsentAuthorizationSession . Starting a new ConsentAuthorizationSession, we require the TPP to store the FinTech identity of the service requesting PSU alice@fintech with the ConsentAuthorizationSession record before initiating a redirect to the ConsentAuthorisationApi. This is, the ConsentAuthorizationSession record stored in the TPP Database has the state: // Syntax: [index+]=ConsentAuthorizationSession[data] [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, ConsentData] // Where redirectCode is a one time key that can be used by the ConsentAuthorisationApi once to retrieve the ConsentAuthorizationSession. // Where auth-id is the identifier of this ConsentAuthorizationSession","title":"Step-2: Store psu-id@fintech with the ConsentAuthorizationSession"},{"location":"architecture/concepts/psu-security-concept/#step-2-identify-psu-at-the-tpp-consentauthorisationapi","text":"At first, redirecting a PSU from the FinTechApi to the TPP ConsentAuthorisationApi does not establish any relationship between the PSU and the TPP, even if we can use the redirectCode associated with the redirected URL to retrieve ConsentAuthorisationSession. Of course the ConsentAuthorisationApi knows that the ConsentAuthorizationSession was initiated by alice@fintech, but this does not mean that the PSU controlling the current PsuUserAgent (known as ConsentAuthorisationUI) is the same natural person as the one controling the identity alice@fintech. In order to proceed with the ConsentAuthorisationSession, the TPP ConsentAuthorisationApi will have to establish an identification of the natural person controlling the UserAgent, resulting in a new PSU identity called (psu-id@tpp). This PSU identity (psu-id@tpp) is associated with the ConsentAuthorisationSession upon successful authentication of the PSU at the TPP ConsentAuthorisationApi interface. At this stage, the ConsentAuthorizationSession record stored in the TPP Database has the following state: [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, alice123@tpp, ConsentData] // But with the assumption that alice@fintech =/=> alice123@tpp. // Meaning that both identities are not yet verified equivalent (controlled by the same natural person) Even though the ConsentAuthorizationSession in the TPP database is associated with two identities (alice@fintech and alice123@tpp), there is no proof that both identities alice@fintech and alice123@tpp are controlled by the same natural person.","title":"Step-2: Identify PSU at the TPP ConsentAuthorisationApi"},{"location":"architecture/concepts/psu-security-concept/#step-3a-consentauthorisation-at-the-tpps-consentauthorisationapi-embedded-sca","text":"In an Embedded-SCA case, the credentials associated with psu-id@aspsp are collected by the ConsentAuthorisationApi and forwarded to the OpenBankingApi of the ASPSP. In this case it is easy to assume uniqueness between both psu-id@tpp and psu-id@aspsp as both are done within the same user session at the same interface. This results in the following record after a successful embedded consent authorization at the ConsentAuthorisationApi: [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, alice123@tpp, alice-s@aspsp, ConsentData, alice123@tpp==>alice-s@aspsp] // Where alice@fintech =/=> alice123@tpp. // Meaning that both identities are not yet verified equivalent (owned by the same natural person) // Where alice123@tpp ==> alice-s@aspsp. // Meaning alice123@tpp could provide the banking credentials of alice-s@aspsp. Even in this embedded case, there is still a missing equivalence between alice@fintech and alice-s@tpp .","title":"Step-3a: ConsentAuthorisation at the TPP's ConsentAuthorisationApi (Embedded-sca)"},{"location":"architecture/concepts/psu-security-concept/#step-3b-identify-psu-at-the-aspsps-onlinebankingapi-redirect-sca","text":"In a Redirect-SCA case (oauth, redirect, decoupled), the PSU has to be redirected by the ConsentAuthorisationApi to the OnlienBanking interface of the ASPSP. After a successful consent authorization at the OnlienBanking interface, the record could be updated by the mean of poling the authorization status of this ConsentAuthorizationSession at the OpenBankingApi of the ASPSP. Upon successful authorization of the requested consent, the ConsentAuthorizationSession in the database of the TPP looks like: [auth-id,redirectCode]=ConsentAuthorizationSession[auth-id,redirectCode, alice@fintech, alice123@tpp, alice-s@aspsp, ConsentData] // Where alice@fintech =/=> alice123@tpp. // Meaning that both identities are not yet verified equivalent (owned by the same natural person) // Where alice123@tpp =/=> alice-s@aspsp. // Meaning that both identities are not yet verified equivalent (owned by the same natural person)","title":"Step-3b: Identify PSU at the ASPSP's OnlineBankingApi (Redirect-sca)"},{"location":"architecture/concepts/psu-security-concept/#step-4-verify-equivalence-between-psu-idaspsp-and-psu-idtpp-redirect-sca","text":"After a successful consent authorization at the OnlineBankingApi of the ASPSP, the framework has to ensure equivalence between the PSU identified at the TPP and the PSU identified at the ASPSP. In this framework, we designed a two steps redirection FinTech -> TPP -> ASPSP knowing that this might make the process more cumbersome, but this design represents the superset of most of the cases found on the market. After thorough analysis of most scenarios, we noticed that the identity equivalence process can only securely happen in one of these ways:","title":"Step-4: Verify Equivalence between psu-id@aspsp and psu-id@tpp (Redirect-sca)"},{"location":"architecture/concepts/psu-security-concept/#alt-1-sharing-of-identity-provider","text":"If two involved entities (FinTech, TPP, ASPSP) share the same identity provider (IDP), the identity association process will be simple as the IDP will provide a common identifier. For example the subject claim of an identity token could lead to the verification of subject(alice123@tpp)==subject(alice-s@aspsp).","title":"Alt-1: Sharing of Identity Provider"},{"location":"architecture/concepts/psu-security-concept/#alt-2-no-sharing-of-identity-provider","text":"If two parties are not sharing identity provider, a physical back redirection from the ASPSP to the TPP must be used to help complete the identity verification. Note that a physical back redirection will not be possible with the decoupled approach. Following sub-steps will be needed to ensure clean and secure physical back redirection in the example of a redirect from the TPP to the ASPSP:","title":"Alt-2: No Sharing of Identity Provider"},{"location":"architecture/concepts/psu-security-concept/#make-sure-the-physical-back-redirection-sends-the-psu-to-the-source-psuuseragent","text":"The URL for the physical back redirection must have been protected against manipulation: - In case there is an initiation step present between TPP and ASPSP, use this step must have been used to transfer the back redirection url to the ASPSP (this is an example of the redirect approach of the NextGenPSD2 API). - In case there is no such initiation step (generally when OAuth is being used), make sure oAuth2 back redirection url templates and webOrigins are properly designed, as the concrete back redirection url is transported in the redirect_uri parameter of the consent request and exposed to attackers for manipulations.","title":"Make sure the physical back redirection sends the PSU to the Source PsuUserAgent"},{"location":"architecture/concepts/psu-security-concept/#verify-redirect-state-once-in-the-source-psuuseragent","text":"A RedirectCookie must have been set on the PsuUserAgent while redirecting a user from the TPP (ConsentAuthorisationApi) to the ASPSP (OnlineBankingApi). The back redirection url to contains contains the state parameter that is used by the source PsuUserAgent to validate stored RedirectCookie. If a physical redirect can occur from the ASPSP (OnlineBankingApi) back to the TPP (ConsentAuthorisationApi), a validation of the original RedirectCookie can be taken as a guaranty to declare equivalence between the psu-id@tpp and the psu-id@aspsp .","title":"Verify Redirect State once in the Source PsuUserAgent"},{"location":"architecture/concepts/psu-security-concept/#alt-3-no-sharing-of-idp-and-decoupled-sca","text":"We define a decoupled approach as one where there no way of achieving physical (back) redirection between the source UIApp and the target UiApp. This generally happens when both are not on the same physical device. In this case a physical exchange muss happen. This physical information exchange is generally sufficient in one direction as the purpose is to make sure the PSU is physically in control of both devices (and UIApp credentials). Following are among other means for physical information exchange between two devices:","title":"Alt-3: No Sharing of IDP and Decoupled-sca"},{"location":"architecture/concepts/psu-security-concept/#manual-code-transfer","text":"Physical sharing of state information between the source an the target of the redirection can be covered by having one side of the redirect enter a redirectCode displayed by the other side. In this case the redirectCode displayed is the handle for a more complex hash code shared over the back channel between source and target of the redirect.","title":"Manual Code Transfer"},{"location":"architecture/concepts/psu-security-concept/#qr-scan","text":"Physical sharing of state information between the source an the target of the redirection can be covered by having one side of the redirect (camera capable side) the possibility to scan a QR-Code displayed by the other side UIApp.","title":"QR-Scan"},{"location":"architecture/concepts/psu-security-concept/#push-notifications","text":"A push notification could be used to deep link the user into the target decoupled UIApp. To prevent spam, push notification shall only be done if the overall process can provide a sufficient level of confidence that the source side of the redirection identified the PSU before the initiation of the redirection process. The use of push notification can replaces the manual code or QR-scan described above.","title":"Push notifications"},{"location":"architecture/concepts/psu-security-concept/#limitation-of-identity-equivalence-for-existing-openbanking-flows","text":"In some OpenBanking approaches, validating the consent at the OnlineBanking interface of the ASPSP directly finalizes authorization of the service request. The current state of the NextGenPSD2 specification for example finalizes a payment initiation with the act of a PSU authorizing the payment consent (either on the ASPSP or TPP interface), but future release are planing an additional step for the confirmation of the service request at the OpenBanking interface (after authorization). This additional step is necessary for to complete verification of the identity equivalence as described above. Recall that this weakness is only provided if the consent authorizing interface (OnlineBankingApi for redirect-sca or ConsentAuthorizationApi for embedded-sca) can not establish identity equivalence. Remember that if source and target share the same identity provider, target will generally be able establish identity equivalence and therefore authorized payment initiation can be release for execution without breach of the OpenBanking PSU Contract .","title":"Limitation of Identity Equivalence for Existing OpenBanking Flows"},{"location":"architecture/drafts/initial_requirements/","text":"Tech setup Spring Boot >= 2.2 Flowable BPMN 6.x Drools rule engine (embedded with Flowable) Postgres RDBMS 12.x XS2A-flow for tests Least annoying API: TPP creates user profile (name, surname,...) that provides information necessary to perform requests on his behalf TPP provides setting which mode will be used STATIC or DIALOG to perform user requests In STATIC mode TPP must fulfill all fields that are not provided by profile but are necessary to perform action (except SCA) TPP calls i.e. /pay/IBAN-from/IBAN-to/CURRENCY/amount with parameters from step nr. 3. The only extra stuff to complete the call is SCA Initial implementation diagram E2E flows Transaction list flow. Performing payment flow. Generic request handling (Check consent is valid pre-filter) Initially (for MVP0), questions Needs consent? and Consent valid? are answered using database-table that contains bank profile, in future it can be switched to rule engine or entire BPMN job. TPP can initiate consent with PSU under the hood if required. This basically means that if request is missing consent, but has flag to allow automatic consent creation TPP will call obtaining consent flow. Obtaining AIS Consent swimlane Getting transaction list using AIS Consent swimlane Full swimlane e2e for getting transaction list Get transaction list by FinTech **Notes:** 1. Initially PSU enters FinTech screen 'Transaction list' 1. Since consent is missing, when being asked for 'Transaction list' TPP will create implicit consent with PSU (since PSU is in session with FinTech) 1. After consent was established FinTech can store it and get 'Transaction list' without PSU intervention 1. If consent has expired FinTech should inform user and perform step 1 again ![Implementation draft diagram - Tx list full](http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/adorsys/open-banking-gateway/develop/docs/architecture/drafts/implementation-v0-full-flow-tx-list.puml&fmt=svg&vvv=1&sanitize=true) Full swimlane e2e for performing payment Perform payment by FinTech ![Implementation draft diagram - Perform payment](http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/adorsys/open-banking-gateway/develop/docs/architecture/drafts/implementation-v0-full-flow-payment.puml&fmt=svg&vvv=2&sanitize=true) API OpenBankingGateway Api is defined for boundary (of course TPP itself can use it): FinTech with OpenBankingGw API <--> TPP with OpenBankingGw Impl (See diagrams above) Consent API: 1. PUT /consents/{bankId} body: {accounts: [<accountIds>], allAccounts: true} to create consent Account information API: 1. GET /transactions to read transactions with option to ask for consent automatically 1. GET /accounts to read account details with option to ask for consent automatically Payment API: 1. PUT /payments to initiate payment ... In short With details API sketch PSU wants to pay 100EUR to IBAN 12345 Generic case Find PSU client bank id GET /api/v1/banks?name=Deutsche or GET /api/v1/banks?bic=12345 -> {bankId} View necessary parameters that are required from PSU for {bankId} to execute payment: GET /api/v1/payments/{bankId}/{psuId}/{ibanFrom}/{ibanTo}/parameters - yields {\"GEO_LOCATION\": \"This payment requires client geo-location\"} (Note: this also may yield i.e. SCA method if PSU did not select it in profile) Since request can't automatically proceed, TPP reads required GEO_LOCATION from PSU Now TPP can proceed with payment PUT /api/v1/payments/{bankId}/{psuId}/{ibanFrom}/{ibanTo} body: {\"amount\": 100.0, \"currency\": \"EUR\", \"GEO_LOCATION\": {\"lat\": 12, \"lng\": 10.0}} (Note: This can have i.e. SCA method to use that overrides profile defaults) OpenBanking handles request sequence using computed process Sequence diagram TPP acquires mandatory parameters before request TPP acquires mandatory parameters during request","title":"Draft"},{"location":"architecture/drafts/initial_requirements/#tech-setup","text":"Spring Boot >= 2.2 Flowable BPMN 6.x Drools rule engine (embedded with Flowable) Postgres RDBMS 12.x XS2A-flow for tests","title":"Tech setup"},{"location":"architecture/drafts/initial_requirements/#least-annoying-api","text":"TPP creates user profile (name, surname,...) that provides information necessary to perform requests on his behalf TPP provides setting which mode will be used STATIC or DIALOG to perform user requests In STATIC mode TPP must fulfill all fields that are not provided by profile but are necessary to perform action (except SCA) TPP calls i.e. /pay/IBAN-from/IBAN-to/CURRENCY/amount with parameters from step nr. 3. The only extra stuff to complete the call is SCA","title":"Least annoying API:"},{"location":"architecture/drafts/initial_requirements/#initial-implementation-diagram","text":"","title":"Initial implementation diagram"},{"location":"architecture/drafts/initial_requirements/#e2e-flows","text":"Transaction list flow. Performing payment flow.","title":"E2E flows"},{"location":"architecture/drafts/initial_requirements/#generic-request-handling-check-consent-is-valid-pre-filter","text":"Initially (for MVP0), questions Needs consent? and Consent valid? are answered using database-table that contains bank profile, in future it can be switched to rule engine or entire BPMN job.","title":"Generic request handling (Check consent is valid pre-filter)"},{"location":"architecture/drafts/initial_requirements/#tpp-can-initiate-consent-with-psu-under-the-hood-if-required","text":"This basically means that if request is missing consent, but has flag to allow automatic consent creation TPP will call obtaining consent flow.","title":"TPP can initiate consent with PSU under the hood if required."},{"location":"architecture/drafts/initial_requirements/#obtaining-ais-consent-swimlane","text":"","title":"Obtaining AIS Consent swimlane"},{"location":"architecture/drafts/initial_requirements/#getting-transaction-list-using-ais-consent-swimlane","text":"","title":"Getting transaction list using AIS Consent swimlane"},{"location":"architecture/drafts/initial_requirements/#full-swimlane-e2e-for-getting-transaction-list","text":"Get transaction list by FinTech **Notes:** 1. Initially PSU enters FinTech screen 'Transaction list' 1. Since consent is missing, when being asked for 'Transaction list' TPP will create implicit consent with PSU (since PSU is in session with FinTech) 1. After consent was established FinTech can store it and get 'Transaction list' without PSU intervention 1. If consent has expired FinTech should inform user and perform step 1 again ![Implementation draft diagram - Tx list full](http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/adorsys/open-banking-gateway/develop/docs/architecture/drafts/implementation-v0-full-flow-tx-list.puml&fmt=svg&vvv=1&sanitize=true)","title":"Full swimlane e2e for getting transaction list"},{"location":"architecture/drafts/initial_requirements/#full-swimlane-e2e-for-performing-payment","text":"Perform payment by FinTech ![Implementation draft diagram - Perform payment](http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/adorsys/open-banking-gateway/develop/docs/architecture/drafts/implementation-v0-full-flow-payment.puml&fmt=svg&vvv=2&sanitize=true)","title":"Full swimlane e2e for performing payment"},{"location":"architecture/drafts/initial_requirements/#api","text":"OpenBankingGateway Api is defined for boundary (of course TPP itself can use it): FinTech with OpenBankingGw API <--> TPP with OpenBankingGw Impl (See diagrams above) Consent API: 1. PUT /consents/{bankId} body: {accounts: [<accountIds>], allAccounts: true} to create consent Account information API: 1. GET /transactions to read transactions with option to ask for consent automatically 1. GET /accounts to read account details with option to ask for consent automatically Payment API: 1. PUT /payments to initiate payment ...","title":"API"},{"location":"architecture/drafts/initial_requirements/#in-short","text":"","title":"In short"},{"location":"architecture/drafts/initial_requirements/#with-details","text":"","title":"With details"},{"location":"architecture/drafts/initial_requirements/#api-sketch","text":"","title":"API sketch"},{"location":"architecture/drafts/initial_requirements/#psu-wants-to-pay-100eur-to-iban-12345","text":"","title":"PSU wants to pay 100EUR to IBAN 12345"},{"location":"architecture/drafts/initial_requirements/#generic-case","text":"Find PSU client bank id GET /api/v1/banks?name=Deutsche or GET /api/v1/banks?bic=12345 -> {bankId} View necessary parameters that are required from PSU for {bankId} to execute payment: GET /api/v1/payments/{bankId}/{psuId}/{ibanFrom}/{ibanTo}/parameters - yields {\"GEO_LOCATION\": \"This payment requires client geo-location\"} (Note: this also may yield i.e. SCA method if PSU did not select it in profile) Since request can't automatically proceed, TPP reads required GEO_LOCATION from PSU Now TPP can proceed with payment PUT /api/v1/payments/{bankId}/{psuId}/{ibanFrom}/{ibanTo} body: {\"amount\": 100.0, \"currency\": \"EUR\", \"GEO_LOCATION\": {\"lat\": 12, \"lng\": 10.0}} (Note: This can have i.e. SCA method to use that overrides profile defaults) OpenBanking handles request sequence using computed process","title":"Generic case"},{"location":"architecture/drafts/initial_requirements/#sequence-diagram","text":"","title":"Sequence diagram"},{"location":"architecture/drafts/initial_requirements/#tpp-acquires-mandatory-parameters-before-request","text":"","title":"TPP acquires mandatory parameters before request"},{"location":"architecture/drafts/initial_requirements/#tpp-acquires-mandatory-parameters-during-request","text":"","title":"TPP acquires mandatory parameters during request"}]}